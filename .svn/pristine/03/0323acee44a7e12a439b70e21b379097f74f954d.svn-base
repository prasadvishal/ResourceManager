package com.mindfiresolutions.resourcemanager.admin;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.IdSetter;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetails;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetailsResponse;
import com.mindfiresolutions.resourcemanager.utility.ApiCallHandler;
import com.mindfiresolutions.resourcemanager.utility.CheckForExpiry;
import com.mindfiresolutions.resourcemanager.utility.InternetConnections;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;

import java.util.Locale;

import retrofit2.Call;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_COUNT;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_DETAILS;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_ID;

/**
 * This activity displays software details
 * created by Shivangi singh on 5th March
 * modified on 29th May
 */

public class SoftwareDetailsActivity extends AppCompatActivity implements View.OnClickListener, ApiCallHandler.Listener {

    private static final String TAG = SoftwareDetailsActivity.class.getSimpleName();
    private int mSoftwareId, mSoftware_count;
    private SoftwareDetails mSoftwareDetails;
    private static final String KEY_DELETE = "Delete";
    private static final String KEY_FILL_DETAILS = "FillDetails";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_software_details);

        Intent i = getIntent();
        mSoftwareId = i.getExtras().getInt(SOFTWARE_ID);
        mSoftware_count = i.getExtras().getInt(SOFTWARE_COUNT);
        LoggerUtility.LogGenerator(TAG, "Intent Data received: " + mSoftwareId);
        String softwareCount = Integer.toString(mSoftware_count);
        TextView softwareCountTextView = ((TextView) findViewById(R.id.software_details_txt_no_license));
        softwareCountTextView.setText(softwareCount);

        if (InternetConnections.checkInternetConnection(getApplicationContext())) {
            LoggerUtility.LogGenerator(TAG, "INTERNET connection available");
            fillSoftwareDetails(mSoftwareId);
            findViewById(R.id.software_detail_btn_delete).setOnClickListener(this);
            findViewById(R.id.software_detail_btn_edit).setOnClickListener(this);

        } else {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.no_internet));
        }
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case (R.id.software_detail_btn_delete):
                deleteSoftware(mSoftwareId);
                break;

            case (R.id.software_detail_btn_edit):
                Intent i = new Intent(this, AddNewSoftwareResourceActivity.class);
                i.putExtra(SOFTWARE_DETAILS, getSoftwareDetails());
                i.putExtra(SOFTWARE_COUNT, mSoftware_count);
                i.putExtra(SOFTWARE_ID, mSoftwareId);
                if (i.hasExtra(SOFTWARE_DETAILS))
                    startActivity(i);
                else
                    LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.unable_to_connect));
                break;

            default:
                LoggerUtility.LogGenerator(TAG, "No Matching cases");
        }
    }

//to delete the software
    private void deleteSoftware(int softwareID) {
        final String token = CheckForExpiry.checkForToken(this);
        ApiCallHandler apiCallHandler = ApiCallHandler.getInstance();
        Call<ResponseGetterBase> call = apiCallHandler.getInterface().deleteSoftware(LOGIN_REQUEST_HEADER_VALUE, token, softwareID);
        apiCallHandler.getResponse(call, KEY_DELETE, this, this);
//        call.enqueue(new Callback<ResponseGetterBase>() {
//                         @Override
//                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
//                             //response's body
//                             LoggerUtility.LogGenerator(TAG, "Response body");
//                             try {
//                                 LoggerUtility.ToastGeneratorShort();(getApplicationContext(), response.body().getMessage());
//
//                             } catch (NullPointerException e) {
//                                 LoggerUtility.ToastGeneratorShort();(getApplicationContext(), getString(R.string.error_requesting_api));
//                             }
//                         }
//
//                         @Override
//                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
//                             LoggerUtility.LogGenerator(TAG, "Error requesting API");
//                         }
//                     }
//        );
    }

    void fillSoftwareDetails(int softwareID) {
        final String token = CheckForExpiry.checkForToken(this);
        IdSetter softwareDetailIdSetter = new IdSetter();
        softwareDetailIdSetter.setId(mSoftwareId);
        IdSetter idSetter = new IdSetter();
        idSetter.setId(softwareID);
        LoggerUtility.LogGenerator(TAG, "software id received: " + mSoftwareId);
        ApiCallHandler apiCallHandler = ApiCallHandler.getInstance();
        Call<SoftwareDetailsResponse> call = apiCallHandler.getInterface().getSoftwareDetailById(LOGIN_REQUEST_HEADER_VALUE, token, softwareDetailIdSetter); // TODO Handle SoftwareCount it after mapping is done
        apiCallHandler.getResponse(call, KEY_FILL_DETAILS, this, this);
        LoggerUtility.LogGenerator(TAG, "response in call object in SoftwareDetailsActivity");


//        call.enqueue(new Callback<SoftwareDetailsResponse>() {
//                         @Override
//                         public void onResponse(Call<SoftwareDetailsResponse> call, Response<SoftwareDetailsResponse> response) {
//                             //response's body
//                             progressDialog.dismiss();
//                             LoggerUtility.LogGenerator(TAG, "Response body");
//                             try {
//                                 if (response.body().getResponse().getCode() == OK) {
//                                     setFields(response.body().getSoftwareDetails());
//                                     setSoftwareDetails(response.body().getSoftwareDetails());
//                                 }
//                             } catch (NullPointerException e) {
//                                 LoggerUtility.ToastGeneratorShort();(getApplicationContext(), getString(R.string.error_requesting_api));
//                             }
//                         }
//
//                         @Override
//                         public void onFailure(Call<SoftwareDetailsResponse> call, Throwable t) {
//                             progressDialog.dismiss();
//                             LoggerUtility.LogGenerator(TAG, "Error requesting API");
//                         }
//                     }
//        );
    }

    void setFields(SoftwareDetails softwareDetails) {
        TextView txtSoftwareDsc = (TextView) findViewById(R.id.software_details_txt_software_desc);
        txtSoftwareDsc.setText(softwareDetails.getDescription());

        TextView txtSoftwareCreatedBy = (TextView) findViewById(R.id.software_details_txt_created_admin_name);
        txtSoftwareCreatedBy.setText(softwareDetails.getCreatedBy());

        TextView txtSoftwareCreatedDate = (TextView) findViewById(R.id.software_details_txt_created_date);
        txtSoftwareCreatedDate.setText(softwareDetails.getCreationDate());

        TextView txtSoftwareName = (TextView) findViewById(R.id.software_details_txt_software_name);
        txtSoftwareName.setText(softwareDetails.getSoftwareName());

        TextView txtSoftwareVersion = (TextView) findViewById(R.id.software_details_txt_product__version_image);
        txtSoftwareVersion.setText(softwareDetails.getVersion());

        TextView txtSoftwareLicenseStatus = (TextView) findViewById(R.id.software_details_txt_license_status);
        txtSoftwareLicenseStatus.setText(String.format(Locale.getDefault(), "%d", softwareDetails.getLicenseType()));

        TextView txtSoftwareModifiedBy = (TextView) findViewById(R.id.software_details_txt_modified_by);
        txtSoftwareModifiedBy.setText(softwareDetails.getModifiedBy());

        TextView txtSoftwareModifiedDate = (TextView) findViewById(R.id.software_details_txt_modified_date);
        txtSoftwareModifiedDate.setText(softwareDetails.getModifiedDate());
    }

    void setSoftwareDetails(SoftwareDetails softwareDetails) {
        this.mSoftwareDetails = softwareDetails;
    }

    SoftwareDetails getSoftwareDetails() {
        return mSoftwareDetails;
    }

    @Override
    public void onSuccessResult(Object result, String KEY) {
        switch (KEY) {
            case (KEY_DELETE):
                callBackDelete(result);
                break;
            case (KEY_FILL_DETAILS):
                callBackFillDetails(result);
                break;
            default:
                break;
        }

    }

    private void callBackDelete(Object result) {
        ResponseGetterBase responseGetterBase = (ResponseGetterBase) result;
        LoggerUtility.LogGenerator(TAG, "Response body");
        try {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), responseGetterBase.getMessage());

        } catch (NullPointerException e) {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.error_requesting_api));
        }
    }

    private void callBackFillDetails(Object result) {
        SoftwareDetailsResponse softwareDetailsResponse = (SoftwareDetailsResponse) result;
        LoggerUtility.LogGenerator(TAG, "Response body");
        try {
            if (((SoftwareDetailsResponse) result).getResponse().getCode() == OK) {
                setFields(softwareDetailsResponse.getSoftwareDetails());
                setSoftwareDetails(softwareDetailsResponse.getSoftwareDetails());
            }
        } catch (NullPointerException e) {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.error_requesting_api));
        }

    }
}

