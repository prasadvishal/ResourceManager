package com.mindfiresolutions.resourcemanager.admin;

import android.app.DatePickerDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.AllResourceSummaryGetter;
import com.mindfiresolutions.resourcemanager.model.ViewHardwareSummary;
import com.mindfiresolutions.resourcemanager.model.ViewSharedResource;
import com.mindfiresolutions.resourcemanager.model.ViewSoftwareSummary;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.InternetConnections;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;

import java.security.PrivateKey;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.NAMEKEY;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.PASSWORDKEY;

public class AddNewHardwareResourceActivity extends AppCompatActivity implements View.OnClickListener,AdapterView.OnItemSelectedListener {
    private Spinner mHardwareTypeSpinner,mBrandSpinner,mHardwareStatus;
    private EditText mHardwareDescription,mMACid,mSrvcTag;
    private TextView mOrderDateCreated,mReceivedDate,mCurrentDate;
    private Button mAddHardwareButton;
    private SimpleDateFormat mDateFormatter;
    private CheckBox mShareStatus;
    private DatePickerDialog mDatePickerDialog;
    private static final String TAG = AddNewHardwareResourceActivity.class.getSimpleName();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        setContentView(R.layout.activity_add_new_hardware_resource);
        mHardwareDescription = (EditText)findViewById(R.id.new_hardware_rqst_desc);
        mSrvcTag = (EditText)findViewById(R.id.add_new_hardware_srvctag);
        mMACid = (EditText)findViewById(R.id.add_new_hardware_mac_id);
        mOrderDateCreated = (TextView)findViewById(R.id.add_new_hardware_order_date);
        mReceivedDate = (TextView)findViewById(R.id.add_new_hardware_rcvd_date);
        mCurrentDate = (TextView)findViewById(R.id.add_new_hardware_curnt_date);
        mHardwareTypeSpinner = (Spinner)findViewById(R.id.add_new_hardware_hardware_type_spinner);
        mBrandSpinner = (Spinner)findViewById(R.id.add_new_hardware_hardware_brand_spinner);
        mHardwareStatus = (Spinner)findViewById(R.id.add_new_hardware_hardware_status_spinner);
        mShareStatus = (CheckBox)findViewById(R.id.shared_resource_chkbox);
        mAddHardwareButton = (Button)findViewById(R.id.add_new_hardware_add_hardware_button);
        prepareListWithData();
        mOrderDateCreated.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (view.getId() == mOrderDateCreated.getId())) {
                    mDatePickerDialog.show();
                    setDateTimeField(mOrderDateCreated.getId());
                }
                if(view.getId()==mReceivedDate.getId())
                {
                    setDateTimeField(mReceivedDate.getId());
                }
            }
        });
        
        mReceivedDate.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                if(view.getId()==mReceivedDate.getId())
                {
                    setDateTimeField(mReceivedDate.getId());
                }
            }
        });

    }
    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        // On selecting a spinner item
        String item = parent.getItemAtPosition(position).toString();

        // Showing selected spinner item
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
    }
    public void onNothingSelected(AdapterView<?> arg0) {
        // TODO Auto-generated method stub
    }

    private void setDateTimeField(final int viewId) {//function to set date in mIssueDate using the date picker
        findViewById(viewId).setOnClickListener(this);
        Calendar newCalendar = Calendar.getInstance();
        mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                ((TextView)findViewById(viewId)).setText(mDateFormatter.format(newDate.getTime()));
            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }

    void prepareListWithData() {
        //TODO add progressbar
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        Call<AllResourceSummaryGetter> call = callAPIInterface.getResourceSummary(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");

        call.enqueue(new Callback<AllResourceSummaryGetter>() {
                         @Override
                         public void onResponse(Call<AllResourceSummaryGetter> call, Response<AllResourceSummaryGetter> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             if (response.body().getResponse().getCode() == OK) {
                                 LoggerUtility.makeLog(TAG, response.body().getResponse().getMessage());
                                 List<ViewHardwareSummary> viewHardwareSummary = response.body().getViewHardwareSummary();
                                 List<ViewSoftwareSummary> viewSoftwareSummary = response.body().getViewSoftwareSummary();
                                 List<ViewSharedResource> viewSharedResource = response.body().getViewSharedResource();
                                 List<String> hardwareResources = new ArrayList<>();
                                 List<String> softwareResources = new ArrayList<>();
                                 List<String> sharedResources = new ArrayList<>();
                                 List<String> pendingRequests = new ArrayList<>();

                                 for (int i = 0; i < viewHardwareSummary.size(); i++) {
                                     hardwareResources.add(i, viewHardwareSummary.get(i).getHardwareType() + "\t\t\t\t" + viewHardwareSummary.get(i).getCount());
                                     LoggerUtility.makeLog(TAG, viewHardwareSummary.get(i).getHardwareType());
                                 }
                                 for (int i = 0; i < viewSoftwareSummary.size(); i++) {
                                     softwareResources.add(i, viewSoftwareSummary.get(i).getSoftwareName() + "\t\t\t\t" + viewSoftwareSummary.get(i).getValidCount());
                                     LoggerUtility.makeLog(TAG, viewSoftwareSummary.get(i).getSoftwareName());
                                 }
                                 for (int i = 0; i < viewSharedResource.size(); i++) {
                                     sharedResources.add(i, viewSharedResource.get(i).getHardwareType() + "\t\t\t\t" + viewSharedResource.get(i).getCount());
                                     LoggerUtility.makeLog(TAG, viewSharedResource.get(i).getHardwareType() + "\t\t\t\t" + viewSharedResource.get(i).getCount());
                                 }
                                 //listDataChild.put(listDataHeader.get(0), hardwareResources);
                                 listDataChild.put(listDataHeader.get(0), hardwareResources); // Header, Child data
                                 listDataChild.put(listDataHeader.get(1), softwareResources);
                                 listDataChild.put(listDataHeader.get(2), sharedResources);
                                 listDataChild.put(listDataHeader.get(3), pendingRequests);
                                 //TODO string
                                 //  send viewHardwareSummary.get(i).getHardwareType() in intent

                             }

                         }


                         @Override
                         public void onFailure (Call < AllResourceSummaryGetter > call, Throwable t){
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }

        );
    }
}
