package com.mindfiresolutions.resourcemanager.admin;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.AvailableHardwareDetails;
import com.mindfiresolutions.resourcemanager.model.AvailableHardwareDetailsByTypeIdResponse;
import com.mindfiresolutions.resourcemanager.model.PendingRequestResponseSetter;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.model.TypeSetter;
import com.mindfiresolutions.resourcemanager.utility.ApiCallHandler;
import com.mindfiresolutions.resourcemanager.utility.CheckForExpiry;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import retrofit2.Call;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.BRAND;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_PENDING_REQUEST_OBJECT;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_TYPE_ID;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.MODEL;

/*
This class deals with assigning pending software request which comes to admin
Created on 25th May
 */

public class AssignPendingHardwareResourceActivity extends AppCompatActivity implements AdapterView.OnItemClickListener,
        AdapterView.OnClickListener, ApiCallHandler.Listener {

    private int mResTypeId;
    private static String TAG = AssignPendingHardwareResourceActivity.class.getSimpleName();
    private ArrayList<HashMap<String, String>> mAvailableList;
    private ListView mListView;
    private static String HARDWARE_ID = "HardwareID";
    private EditText mDescriptionRequest;
    private PendingRequestResponseSetter mPendingRequestResponseSetter;
    private static final String KEY_GET_RESOURCE = "GetResource";
    private static final String KEY_SET_RESOURCE = "SetResource";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_assign_pending_resource);
        Intent i = getIntent();
        mPendingRequestResponseSetter = i.getExtras().getParcelable(HARDWARE_PENDING_REQUEST_OBJECT);
        mResTypeId = i.getExtras().getInt(HARDWARE_TYPE_ID);
        getResourceList();
        mAvailableList = new ArrayList<>();
        mDescriptionRequest = (EditText) findViewById(R.id.assign_resource_edt_description);
        mListView = (ListView) findViewById(R.id.assign_resource_lv_listView);
        mListView.setOnItemClickListener(this);
        findViewById(R.id.assign_resource_btn_assign).setOnClickListener(this);
    }

    private void getResourceList() {
        final String token = CheckForExpiry.checkForToken(this);
        ApiCallHandler apiCallHandler = ApiCallHandler.getInstance();

//        final ProgressDialog progressDialog = new ProgressDialog(AssignPendingHardwareResourceActivity.this);
//        progressDialog.setMessage(getString(R.string.loading));
//        progressDialog.show();
//        progressDialog.setCancelable(false);
//        progressDialog.setCanceledOnTouchOutside(false);
//        final String token = SharedPref.getSharedPreferences(this, TOKEN);
//        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
//        LoggerUtility.LogGenerator(TAG, "Retrofit object created");
        TypeSetter typeSetter = new TypeSetter();
        typeSetter.setTypeID(mResTypeId);
        Call<AvailableHardwareDetailsByTypeIdResponse> call = apiCallHandler.getInterface().getAvailableHardwareResourceSummaryByTypeId(LOGIN_REQUEST_HEADER_VALUE, token, typeSetter); // TODO Handle SoftwareCount it after mapping is done
        apiCallHandler.getResponse(call, KEY_GET_RESOURCE, this, this);

//        Call<AvailableHardwareDetailsByTypeIdResponse> callHardware = callAPIInterface.getAvailableHardwareResourceSummaryByTypeId(LOGIN_REQUEST_HEADER_VALUE, token, typeSetter);
//        LoggerUtility.LogGenerator(TAG, "response in call object");
//        callHardware.enqueue(new Callback<AvailableHardwareDetailsByTypeIdResponse>() {
//                                 @Override
//                                 public void onResponse(Call<AvailableHardwareDetailsByTypeIdResponse> call, Response<AvailableHardwareDetailsByTypeIdResponse> response) {
//                                     //response's body
//                                     LoggerUtility.LogGenerator(TAG, "Response body");
//                                     List<AvailableHardwareDetails> availableHardwareDetails;
//                                     try {
//                                         if (response.body().getResponse().getCode() == OK) {
//                                             LoggerUtility.makeShortToast(getApplicationContext(), response.body().getResponse().getMessage());
//                                             progressDialog.dismiss();
//                                             availableHardwareDetails = response.body().getAvailableHardwareDetails();
//                                             for (int i = 0; i < availableHardwareDetails.size(); i++) {
//                                                 HashMap<String, String> availableResourceHashMap = new HashMap<>();
//                                                 availableResourceHashMap.put(BRAND, response.body().getAvailableHardwareDetails().get(i).getBrand());
//                                                 LoggerUtility.LogGenerator(TAG, response.body().getAvailableHardwareDetails().get(i).getBrand());
//                                                 availableResourceHashMap.put(HARDWARE_ID,response.body().getAvailableHardwareDetails().get(i).getHardwareID().toString());
//                                                 availableResourceHashMap.put(MODEL, response.body().getAvailableHardwareDetails().get(i).getModel());
//                                                 mAvailableList.add(availableResourceHashMap);
//                                             }
//                                             LoggerUtility.LogGenerator(TAG, "data loaded in hashmap");
//                                             ListAdapter adapter = new SimpleAdapter(AssignPendingHardwareResourceActivity.this, mAvailableList, R.layout.list_item_available_hardware_by_type,
//                                                     new String[]{MODEL, BRAND}, new int[]{R.id.resource_name, R.id.resource_brand});
//                                             mListView.setAdapter(adapter);
//                                             LoggerUtility.LogGenerator(TAG, "after array adapter");
//                                         }
//                                     } catch (Exception e) {
//                                         LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.bad_api));
//                                     }
//                                 }
//
//                                 @Override
//                                 public void onFailure(Call<AvailableHardwareDetailsByTypeIdResponse> call, Throwable t) {
//                                     LoggerUtility.LogGenerator(TAG, "Error requesting API");
//                                     progressDialog.dismiss();
//                                     LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.server_error));
//
//                                 }
//                             }
//        );
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        view.setBackgroundColor(ContextCompat.getColor(AssignPendingHardwareResourceActivity.this,R.color.themeBlue));
        LoggerUtility.LogGenerator(TAG, "hardwareID " + mAvailableList.get(position).get(HARDWARE_ID));
        mPendingRequestResponseSetter.setHardwareID(Integer.parseInt(mAvailableList.get(position).get(HARDWARE_ID)));
    }

    @Override
    public void onClick(View v) {
        mPendingRequestResponseSetter.setDescription(mDescriptionRequest.getText().toString());
        final String token = CheckForExpiry.checkForToken(this);
        ApiCallHandler apiCallHandler = ApiCallHandler.getInstance();
//        final ProgressDialog progressDialog = new ProgressDialog(AssignPendingHardwareResourceActivity.this);
//        progressDialog.setMessage(getString(R.string.loading));
//        progressDialog.show();
//        progressDialog.setCancelable(false);
//        progressDialog.setCanceledOnTouchOutside(false);
//        final String token = SharedPref.getSharedPreferences(this, TOKEN);
//        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
//        LoggerUtility.LogGenerator(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = apiCallHandler.getInterface().getAssignRequestedHardware(LOGIN_REQUEST_HEADER_VALUE, token, mPendingRequestResponseSetter);
        apiCallHandler.getResponse(call, KEY_GET_RESOURCE, this, this);
        //   Call<ResponseGetterBase> callHardware = callAPIInterface.getAssignRequestedHardware(LOGIN_REQUEST_HEADER_VALUE, token, mPendingRequestResponseSetter);
        //    LoggerUtility.LogGenerator(TAG, "response in call object");
//        callHardware.enqueue(new Callback<ResponseGetterBase>() {
//                                 @Override
//                                 public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
//                                     //response's body
//                                     progressDialog.dismiss();
//                                     LoggerUtility.LogGenerator(TAG, "Response body");
//                                     try {
//                                         if (response.body().getCode() == OK) {
//                                             LoggerUtility.makeShortToast(getApplicationContext(), response.body().getMessage());
//                                         }
//                                     } catch (Exception e) {
//                                         LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.bad_api));
//                                     }
//                                 }
//
//                                 @Override
//                                 public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
//                                     LoggerUtility.LogGenerator(TAG, "Error requesting API");
//                                     progressDialog.dismiss();
//                                     LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.server_error));
//
//                                 }
//                             }
//        );
    }

    @Override
    public void onSuccessResult(Object result, String KEY) {
        switch (KEY) {
            case (KEY_GET_RESOURCE):
                getResource(result);
                break;
            case (KEY_SET_RESOURCE):
                setResource(result);
                break;

        }
    }

    private void getResource(Object result) {
        AvailableHardwareDetailsByTypeIdResponse response = (AvailableHardwareDetailsByTypeIdResponse) result;
        LoggerUtility.LogGenerator(TAG, "Response body");
        List<AvailableHardwareDetails> availableHardwareDetails;
        try {
            if (response.getResponse().getCode() == OK) {
                LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.getResponse().getMessage());
                availableHardwareDetails = response.getAvailableHardwareDetails();
                for (int i = 0; i < availableHardwareDetails.size(); i++) {
                    HashMap<String, String> availableResourceHashMap = new HashMap<>();
                    availableResourceHashMap.put(BRAND, response.getAvailableHardwareDetails().get(i).getBrand());
                    LoggerUtility.LogGenerator(TAG, response.getAvailableHardwareDetails().get(i).getBrand());
                    availableResourceHashMap.put(HARDWARE_ID, response.getAvailableHardwareDetails().get(i).getHardwareID().toString());
                    availableResourceHashMap.put(MODEL, response.getAvailableHardwareDetails().get(i).getModel());
                    mAvailableList.add(availableResourceHashMap);
                }
                LoggerUtility.LogGenerator(TAG, "data loaded in hashmap");
                ListAdapter adapter = new SimpleAdapter(AssignPendingHardwareResourceActivity.this, mAvailableList, R.layout.list_item_available_hardware_by_type,
                        new String[]{MODEL, BRAND}, new int[]{R.id.resource_name, R.id.resource_brand});
                mListView.setAdapter(adapter);
                LoggerUtility.LogGenerator(TAG, "after array adapter");
            }
        } catch (Exception e) {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.bad_api));
        }

    }

    private void setResource(Object result) {
        ResponseGetterBase response = (ResponseGetterBase) result;
        LoggerUtility.LogGenerator(TAG, "Response body");
        try {
            if (response.getCode() == OK) {
                LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.getMessage());
            }
        } catch (Exception e) {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.bad_api));
        }

    }


}
