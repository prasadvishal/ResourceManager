package com.mindfiresolutions.resourcemanager.admin;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.AddNewHardwareResourceSetter;
import com.mindfiresolutions.resourcemanager.model.AllResourceSummaryGetter;
import com.mindfiresolutions.resourcemanager.model.HardwareBrandResponse;
import com.mindfiresolutions.resourcemanager.model.HardwareBrandSetter;
import com.mindfiresolutions.resourcemanager.model.HardwareTypeResponse;
import com.mindfiresolutions.resourcemanager.model.HardwareTypeSetter;
import com.mindfiresolutions.resourcemanager.model.ViewHardwareSummary;
import com.mindfiresolutions.resourcemanager.model.ViewSharedResource;
import com.mindfiresolutions.resourcemanager.model.ViewSoftwareSummary;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.Drawer;
import com.mindfiresolutions.resourcemanager.utility.InternetConnections;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;

import java.security.PrivateKey;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.NAMEKEY;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.PASSWORDKEY;

public class AddNewHardwareResourceActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener,NavigationView.OnNavigationItemSelectedListener {
    private Spinner mHardwareTypeSpinner,mBrandSpinner,mHardwareStatus;
    private EditText mHardwareDescription,mMACid,mSrvcTag;
    private TextView mOrderDateCreated,mReceivedDate,mCurrentDate;
    private Button mAddHardwareButton;
    private SimpleDateFormat mDateFormatter;
    private CheckBox mShareStatus;
    private DatePickerDialog mDatePickerDialog;
    private String selectedSpinnerString;
    private Drawer mDrawer = new Drawer();
    private static final String TAG = AddNewHardwareResourceActivity.class.getSimpleName();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_admin_main);
        android.support.v7.app.ActionBar ab = getSupportActionBar();
        // check for Actionbar if present then set tittle
        if (ab != null && ab.isShowing()) {
            ab.setTitle("Resource Manager");
            ab.setSubtitle("Summary");
        }
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        CoordinatorLayout coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinator_app_home);
        LoggerUtility.makeLog(TAG, "outside Coordinator");
        FrameLayout frameLayout = (FrameLayout) coordinatorLayout.findViewById(R.id.content_frame_activity_layout);
        getLayoutInflater().inflate(R.layout.activity_add_new_hardware_resource, frameLayout);
        LoggerUtility.makeLog(TAG, "Toolbar created");
        mDrawer.setDrawerToggle(findViewById(R.id.drawer_layout), toolbar, this, findViewById(R.id.nav_view));
        LoggerUtility.makeLog(TAG, "after setDrawerToggle");
        changeNavigationView(findViewById(R.id.nav_view));

        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        mHardwareDescription = (EditText) findViewById(R.id.new_hardware_rqst_desc);
        mSrvcTag = (EditText) findViewById(R.id.add_new_hardware_srvctag);
        mMACid = (EditText) findViewById(R.id.add_new_hardware_mac_id);
        mOrderDateCreated = (TextView) findViewById(R.id.add_new_hardware_order_date);
        mReceivedDate = (TextView) findViewById(R.id.add_new_hardware_rcvd_date);
        mCurrentDate = (TextView) findViewById(R.id.add_new_hardware_curnt_date);
        mShareStatus = (CheckBox) findViewById(R.id.add_new_hardware_shared_resource_chkbox);
        mAddHardwareButton = (Button) findViewById(R.id.add_new_hardware_add_hardware_button);
        //prepareListWithData();
        fillTodayDate();
        fillSpinner();
        clickListenerDate(mOrderDateCreated);
        clickListenerDate(mReceivedDate);
        mAddHardwareButton.setOnClickListener(new View.OnClickListener(){

            @Override
            public void onClick(View v) {
                if(LoggerUtility.getTextFromView(mMACid).length()==0)
                {
                    LoggerUtility.requestFocusIfError(mMACid,getString(R.string.error_field_required),TAG,"Validation Error: No value for MAC ID");
                    mMACid.setText(LoggerUtility.getTextFromView(mMACid));
                    return;
                }
                if(LoggerUtility.getTextFromView(mSrvcTag).length()==0)
                {
                    LoggerUtility.requestFocusIfError(mSrvcTag,getString(R.string.error_field_required),TAG,"Validation Error: No value for Service Tag");
                    mSrvcTag.setText(LoggerUtility.getTextFromView(mSrvcTag));
                    return;
                }
                if(LoggerUtility.getTextFromView(mOrderDateCreated).length()==0)
                {
                    LoggerUtility.requestFocusIfError(mOrderDateCreated,getString(R.string.error_field_required),TAG,"Validation Error: No value for Ordered Date");
                    mOrderDateCreated.setText(LoggerUtility.getTextFromView(mOrderDateCreated));
                    return;
                }
                if(LoggerUtility.getTextFromView(mReceivedDate).length()==0)
                {
                    LoggerUtility.requestFocusIfError(mOrderDateCreated,getString(R.string.error_field_required),TAG,"Validation Error: No value for Received Date");
                    mReceivedDate.setText(LoggerUtility.getTextFromView(mReceivedDate));
                }
                AddNewHardwareResourceSetter addNewHardwareResourceSetter = new AddNewHardwareResourceSetter();
                



            }
        });
    }
    private void clickListenerDate(final TextView dateTextView) {
        dateTextView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                setDateTimeField(dateTextView.getId());
                mDatePickerDialog.show();
            }
        });
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        // On selecting a spinner item
        String item = parent.getItemAtPosition(position).toString();
        // Showing selected spinner item
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
    }
    public void onNothingSelected(AdapterView<?> arg0) {
        // TODO Auto-generated method stub
    }
    private void fillTodayDate() {
        long date = System.currentTimeMillis();
        LoggerUtility.makeLog(TAG, "inside fill TodayDate");
        SimpleDateFormat sdf = new SimpleDateFormat("MMM MM dd, yyyy h:mm a", Locale.ENGLISH);
        String dateString = sdf.format(date);
        mCurrentDate.setText(dateString);
    }
    private void setDateTimeField(final int viewId) {//function to set date in mIssueDate using the date picker
//        findViewById(viewId).setOnClickListener(this);
        Calendar newCalendar = Calendar.getInstance();
        mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                ((TextView)findViewById(viewId)).setText(mDateFormatter.format(newDate.getTime()));
            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }
    void fillSpinner() {

//        Spinner spinner = (Spinner) findViewById(R.id.add_new_hardware_hardware_status_spinner);
//        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
//                this, R.array.availability, android.R.layout.simple_spinner_item);
//        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
//        spinner.setAdapter(adapter);

        mBrandSpinner = (Spinner) findViewById(R.id.add_new_hardware_hardware_brand_spinner);
        mHardwareTypeSpinner = (Spinner) findViewById(R.id.add_new_hardware_hardware_type_spinner);
        final ProgressDialog progressDialog = new ProgressDialog(AddNewHardwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        Call<HardwareBrandResponse> call = callAPIInterface.getMasterHardwareBrands(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        call.enqueue(new Callback<HardwareBrandResponse>() {
                         @Override
                         public void onResponse(Call<HardwareBrandResponse> call, Response<HardwareBrandResponse> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             if (response.body().getResponse().getCode() == OK) {
                                 List<HardwareBrandSetter> hardwareBandList = response.body().getHardwareBrandSetter();
                                 List<String> hardwareBrandArray = new ArrayList<>();
                                 int i;
                                 for (i = 0; i < hardwareBandList.size(); i++) {
                                     hardwareBrandArray.add(i, hardwareBandList.get(i).getBrand());
                                 }
                                 hardwareBrandArray.add(i, getString(R.string.others));
                                 ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(AddNewHardwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, hardwareBrandArray);
                                 LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                 mBrandSpinner.setAdapter(adapterLicense);
                             }
                         }

                         @Override
                         public void onFailure(Call<HardwareBrandResponse> call, Throwable t) {
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );

        Call<HardwareTypeResponse> callBrand = callAPIInterface.getMasterHardwareTypes(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object in hardware type detailse");
        callBrand.enqueue(new Callback<HardwareTypeResponse>() {
                              @Override
                              public void onResponse(Call<HardwareTypeResponse> call, Response<HardwareTypeResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  if (response.body().getResponse().getCode() == OK) {
                                      List<HardwareTypeSetter> hardwareTypeList = response.body().getHardwareTypeSetter();
                                      List<String> hardwareTypeArray = new ArrayList<>();
                                      int i;
                                      for (i = 0; i < hardwareTypeList.size(); i++) {
                                          hardwareTypeArray.add(i, hardwareTypeList.get(i).getType());
                                      }
                                      hardwareTypeArray.add(i, getString(R.string.others));
                                      ArrayAdapter<String> adapterBrand = new ArrayAdapter<>(AddNewHardwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, hardwareTypeArray);
                                      LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                      mHardwareTypeSpinner.setAdapter(adapterBrand);
                                  }
                              }

                              @Override
                              public void onFailure(Call<HardwareTypeResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );
    }
//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
//                selectedSpinnerString = parent.getItemAtPosition(position).toString();
//            }
//
//            public void onNothingSelected(AdapterView<?> parent) {
//                selectedSpinnerString = getString(R.string.nothing_selected);
//            }

    @Override
    public void onBackPressed() {
        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawer.onBackPressed(drawerLayout);
        } else
            super.onBackPressed();

    }

    void changeNavigationView(View view) {
        NavigationView navigationView = (NavigationView) view;
        navigationView.getMenu().clear();
        navigationView.inflateMenu(R.menu.admin_home_drawer_menu);
        //change header text to admin
        View admin_view = navigationView.getHeaderView(0);
        TextView admin_txt = (TextView) admin_view.findViewById(R.id.name_user);
        //TODO complete admin name here
        admin_txt.setText(getString(R.string.admin));
        navigationView.setNavigationItemSelectedListener(this);

    }

    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        return mDrawer.onNavigationItemSelectedAdmin(item, this, findViewById(R.id.drawer_layout));

    }
}
