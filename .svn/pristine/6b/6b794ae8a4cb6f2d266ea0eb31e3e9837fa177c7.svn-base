package com.mindfiresolutions.resourcemanager.admin;

/**
 * Created by: Shivangi on 27th March
 * Last Modified on: 5/10/2017
 */

import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.HardwareDetailsByTypeSetter;
import com.mindfiresolutions.resourcemanager.model.HardwareIdSetter;
import com.mindfiresolutions.resourcemanager.model.IdSetter;
import com.mindfiresolutions.resourcemanager.model.HardwareDetailsByIdGetter;
import com.mindfiresolutions.resourcemanager.model.HardwareDetailsByIdResponse;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.InternetConnections;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;
import com.mindfiresolutions.resourcemanager.utility.SharedPref;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_DETAILS;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_ID;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_DETAILS;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.TOKEN;

public class HardwareDetailsActivity extends AppCompatActivity implements View.OnClickListener {
    private TextView mMacId, mServiceTag, mOrderedDate, mRecievedDate, mModifiedDate, mModifiedBy;
    private TextView mStatus, mIsSharable, mCreatedBy, mCreationDate, mResName,mResBrand,mResDesc;
    private static final String TAG = HardwareDetailsActivity.class.getSimpleName();
    HardwareDetailsByIdGetter hardwareDetailsByIdGetter;
    private int mHardwareId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hardware_details);
        initViews();
        Intent i = getIntent();
        mHardwareId = i.getExtras().getInt(HARDWARE_ID);
//getIntent.getString;
//        Bundle extras = getIntent().getExtras();
//        String hardwareType = extras.getString(HARDWARE_NAME);
        if (InternetConnections.hasActiveInternetConnection(getApplicationContext())) {
            LoggerUtility.makeLog(TAG, "INTERNET connection available ");
            getHardwareSummary();
        } else {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.no_internet));
        }
        findViewById(R.id.hardware_detail_delete).setOnClickListener(this);
        findViewById(R.id.hardware_detail_edit).setOnClickListener(this);
        findViewById(R.id.hardware_detail_assign).setOnClickListener(this);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case (R.id.hardware_detail_delete):
                deleteHardware(mHardwareId);//TODO add id
                break;
            case (R.id.hardware_detail_edit):
                editHardware(mHardwareId);//TODO add id
                break;
            case (R.id.hardware_detail_assign):
                Intent i = new Intent(this, AssignHardware.class);
                i.putExtra(HARDWARE_ID, mHardwareId);
                startActivity(i);
                overridePendingTransition(R.anim.slide_from_right, R.anim.slide_to_left);
        }
    }

    void editHardware(int editId) {
        Intent i = new Intent(this, AddNewHardwareResourceActivity.class);
        i.putExtra(HARDWARE_DETAILS,getHardwareDetailsByIdGetter());
        if(i.hasExtra(HARDWARE_DETAILS))
        {startActivity(i);
        overridePendingTransition(R.anim.slide_from_right, R.anim.slide_to_left);}
        else
            LoggerUtility.ToastGeneratorShort(getApplicationContext(),getString(R.string.unable_to_connect));
    }

    HardwareDetailsByIdGetter getHardwareDetailsByIdGetter(){
        return hardwareDetailsByIdGetter;
    }

    void setHardwareDetailsByIdGetter(HardwareDetailsByIdGetter hardwareDetailsByIdGetter)
    {
        this.hardwareDetailsByIdGetter = hardwareDetailsByIdGetter;
    }

    void deleteHardware(int mHardwareId) {
        String token = SharedPref.getSharedPreferences(this, TOKEN);
        LoggerUtility.makeLog(TAG, "inside delete");
        final ProgressDialog progressDialog = new ProgressDialog(HardwareDetailsActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        IdSetter hardwareDetailIdSetter = new IdSetter();
        hardwareDetailIdSetter.setId(mHardwareId);
        Call<ResponseGetterBase> call = callAPIInterface.deleteHardware(LOGIN_REQUEST_HEADER_VALUE, token, hardwareDetailIdSetter); // TODO Handle SoftwareCount it after mapping is done
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");

        call.enqueue(new Callback<ResponseGetterBase>() {
                         @Override
                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                             //response's body
                             progressDialog.dismiss();
                             LoggerUtility.makeLog(TAG, "Response body");
                             try {
                                 LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getMessage());

                             } catch (Exception e) {
                                 LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );
    }

    private void initViews() {
        mMacId = (TextView) findViewById(R.id.hardware_details_mac_id);
        mServiceTag = (TextView) findViewById(R.id.hardware_details_service_tag);
        mOrderedDate = (TextView) findViewById(R.id.hardware_details_ordered_date);
        mRecievedDate = (TextView) findViewById(R.id.hardware_details_recieved_date);
        mModifiedDate = (TextView) findViewById(R.id.hardware_details_modified_date);
        mModifiedBy = (TextView) findViewById(R.id.hardware_details_modified_by);
        mStatus = (TextView) findViewById(R.id.hardware_details_status);
        mIsSharable = (TextView) findViewById(R.id.hardware_details_is_sharable);
        mCreatedBy = (TextView) findViewById(R.id.hardware_details_created_admin_name);
        mCreationDate = (TextView) findViewById(R.id.hardware_details_created_date);
        mResName = (TextView)findViewById(R.id.hrdwr_details_res_name);
        mResBrand = (TextView)findViewById(R.id.hrdwr_details_res_brand);
        mResDesc = (TextView)findViewById(R.id.hrdwr_details_res_desc);
    }

    void getHardwareSummary() {
        String token = SharedPref.getSharedPreferences(this, TOKEN);
        final ProgressDialog progressDialog = new ProgressDialog(HardwareDetailsActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        HardwareIdSetter hardwareDetailIdSetter = new HardwareIdSetter();
        hardwareDetailIdSetter.setHardwareId(mHardwareId);
        Call<HardwareDetailsByIdResponse> call = callAPIInterface.getHardwareDetailById(LOGIN_REQUEST_HEADER_VALUE, token, hardwareDetailIdSetter);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        call.enqueue(new Callback<HardwareDetailsByIdResponse>() {
                         @Override
                         public void onResponse(Call<HardwareDetailsByIdResponse> call, Response<HardwareDetailsByIdResponse> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             try{
                             progressDialog.dismiss();
                             if (response.body().getResponse().getCode() == OK) {
                                 LoggerUtility.makeLog(TAG,response.body().getHardwareDetails()[0].toString()+"  "+response.body().getHardwareDetails()[0].getMACID());
                                 setHardwareDetails(response.body().getHardwareDetails()[0]);
                                 setHardwareDetailsByIdGetter(response.body().getHardwareDetails()[0]);
                             } else {
                                 LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getResponse().getMessage());
                             }
                             } catch (Exception e) {
                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<HardwareDetailsByIdResponse> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );
    }

    void setHardwareDetails(HardwareDetailsByIdGetter hardwareDetailsByIdGetter) {
        mMacId.setText(hardwareDetailsByIdGetter.getMACID());
        mServiceTag.setText(hardwareDetailsByIdGetter.getServiceTag());
        mOrderedDate.setText(hardwareDetailsByIdGetter.getOrderDate());
        mRecievedDate.setText(hardwareDetailsByIdGetter.getReceivedDate());
        mModifiedDate.setText(hardwareDetailsByIdGetter.getModifiedDate());
        mStatus.setText(hardwareDetailsByIdGetter.getStatus());
        mIsSharable.setText(hardwareDetailsByIdGetter.getIsSharable().toString());
        mModifiedBy.setText(hardwareDetailsByIdGetter.getModifiedBy());
        mCreatedBy.setText(hardwareDetailsByIdGetter.getCreatedBy());
        mCreationDate.setText(hardwareDetailsByIdGetter.getCreationDate());
        mResName.setText(hardwareDetailsByIdGetter.getModel());
        mResBrand.setText(hardwareDetailsByIdGetter.getBrand());
        mResDesc.setText(hardwareDetailsByIdGetter.getDescription());

    }
}

