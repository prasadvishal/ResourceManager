package com.mindfiresolutions.resourcemanager.user.userResource;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.InputType;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.admin.AddNewHardwareResourceActivity;
import com.mindfiresolutions.resourcemanager.launcherPackage.LoginActivity;
import com.mindfiresolutions.resourcemanager.launcherPackage.SignUpActivity;
import com.mindfiresolutions.resourcemanager.model.AdminListResponse;
import com.mindfiresolutions.resourcemanager.model.AdminListSetter;
import com.mindfiresolutions.resourcemanager.model.HardwareBrandResponse;
import com.mindfiresolutions.resourcemanager.model.HardwareTypeResponse;
import com.mindfiresolutions.resourcemanager.model.HardwareTypeSetter;
import com.mindfiresolutions.resourcemanager.model.NewUserRequestSetter;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetails;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetailsResponse;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetailsSetter;
import com.mindfiresolutions.resourcemanager.user.userHome.HomeActivity;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;
import com.mindfiresolutions.resourcemanager.utility.SharedPref;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static android.support.v4.content.ContextCompat.startActivity;
import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.BAD_REQUEST;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.NOT_FOUND;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.TOKEN;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.USERID;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.USERPREFERENCES;

/**
 * Created By: Vishal on: 3/16/2017
 * Last modified on: 3/23/2017
 */
public class NewRequestActivity extends AppCompatActivity implements View.OnClickListener,AdapterView.OnItemSelectedListener {
    private TextView mIssueDate;
    private SimpleDateFormat mDateFormatter;
    private DatePickerDialog mDatePickerDialog;
    private EditText mTittle;
    private EditText mReqestDescription;
    private Spinner mResourceCategorySpinner,mSubCategorySpinner,mSelectAdminSpinner;
    private Button mRequestResource;
    private List<SoftwareDetails> softwareDetailsList;
    private List<HardwareTypeSetter> hardwareTypeList;
    private List<AdminListSetter> adminList;
    private String TAG = this.getClass().getName();
    private SharedPreferences mSharedPreferences;
    private String token;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_new_request);
        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        findViewsById();
        android.support.v7.app.ActionBar ab = getSupportActionBar();
        //check for Actionbar if present then set tittle
        if (ab != null && ab.isShowing()) {
            ab.setTitle("Resource Manager"); //TODo define in base class,call method here
            ab.setSubtitle("My New Request");
        }
        mSharedPreferences = getSharedPreferences(USERPREFERENCES, Context.MODE_PRIVATE); //Todo Utility
        token = SharedPref.getSharedPreferences(this, TOKEN);
        softwareDetailsList = new ArrayList<>();
        hardwareTypeList = new ArrayList<>();
        adminList = new ArrayList<>();
        List<String> resourcceCategory = new ArrayList<>();   //Spinner dropdown options list
        resourcceCategory.add(getString(R.string.hardware_resource));
        resourcceCategory.add(getString(R.string.software_resource));
        //Creating adapter for spinner
        ArrayAdapter<String> dataAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, resourcceCategory);
        // Drop down layout style - list view with radio button
        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        // attaching data adapter to spinner
        mResourceCategorySpinner.setAdapter(dataAdapter);
        fillSpinners();
        mIssueDate.setOnClickListener(this);
        mRequestResource.setOnClickListener(this);
    }

    private void fillSpinners() {
        mResourceCategorySpinner.setOnItemSelectedListener(this);
        mSubCategorySpinner.setOnItemSelectedListener(this);
        mSelectAdminSpinner.setOnItemSelectedListener(this);
        final ProgressDialog progressDialog = new ProgressDialog(NewRequestActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        final String token = mSharedPreferences.getString(TOKEN, "");
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
            Call<SoftwareDetailsSetter> call = callAPIInterface.getSoftwareDetails(LOGIN_REQUEST_HEADER_VALUE, token);
            LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
            call.enqueue(new Callback<SoftwareDetailsSetter>() {
                             @Override
                             public void onResponse(Call<SoftwareDetailsSetter> call, Response<SoftwareDetailsSetter> response) {
                                 //response's body
                                 LoggerUtility.makeLog(TAG, "Response body");
                                 progressDialog.dismiss();
                                 if (response.body().getResponse().getCode() == OK) {
                                     softwareDetailsList = response.body().getSoftwareDetailsList();
                                 }
                                 if(response.body().getResponse().getCode() == NOT_FOUND){
                                     new AlertDialog.Builder(getApplicationContext())
                                                 .setTitle(getString(R.string.server_error))
                                                 .setMessage(getString(R.string.unable_to_connect))
                                                 .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
                                                     public void onClick(DialogInterface dialog, int which) {
                                                         Intent i = new Intent(getApplicationContext(), HomeActivity.class);
                                                         startActivity(i);
                                                     }
                                                 })
                                                 .setIcon(android.R.drawable.ic_dialog_alert)
                                                 .show();
                                 }
                             }

                             @Override
                             public void onFailure(Call<SoftwareDetailsSetter> call, Throwable t) {
                                 LoggerUtility.makeLog(TAG, "Error requesting API");
                             }
                         }
            );


        Call<HardwareTypeResponse> callType = callAPIInterface.getMasterHardwareTypes(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object in hardware type detailse");
        callType.enqueue(new Callback<HardwareTypeResponse>() {
                              @Override
                              public void onResponse(Call<HardwareTypeResponse> call, Response<HardwareTypeResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  if (response.body().getResponse().getCode() == OK) {
                                      hardwareTypeList = response.body().getHardwareTypeSetter();
                                  }
                              }

                              @Override
                              public void onFailure(Call<HardwareTypeResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );
        Call<AdminListResponse> callAdmin = callAPIInterface.getAdminList(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object in hardware type detailse");
        callAdmin.enqueue(new Callback<AdminListResponse>() {
                              @Override
                              public void onResponse(Call<AdminListResponse> call, Response<AdminListResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  if (response.body().getResponse().getCode() == OK) {
                                      adminList = response.body().getAdminListSetter();
                                      fillAdminSpinner();
                                  }
                              }

                              @Override
                              public void onFailure(Call<AdminListResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );

    }

    private void fillAdminSpinner() {
        List<String> adminListArray = new ArrayList<>();
        int i; String fullname="";
        for (i = 0; i < adminList.size(); i++) {
            fullname = adminList.get(i).getFirstname()+" "+adminList.get(i).getLastname();
            adminListArray.add(i, fullname);
        }
        ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(NewRequestActivity.this, android.R.layout.simple_spinner_dropdown_item, adminListArray);
        LoggerUtility.makeLog(TAG, "Data filled in array adapter");
        mSelectAdminSpinner.setAdapter(adapterLicense);
    }



    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        // On selecting a spinner item
        if(parent.getId()==R.id.category_spinner) {
            switch (position) {
                case 0:
                    fillWithHardwareTypeList();
                    break;
                case 1:
                    fillWithSoftwareName();
                    break;
            }
        }
        // Showing selected spinner item
       // Toast.makeText(parent.getContext(), "Selected: " + position + " position", Toast.LENGTH_SHORT).show();
    }

    private void fillWithSoftwareName() {
        List<String> hardwareBrandArray = new ArrayList<>();
        int i;
        for (i = 0; i < softwareDetailsList.size(); i++) {
            hardwareBrandArray.add(i, softwareDetailsList.get(i).getSoftwareName());
        }
        //hardwareBrandArray.add(i, getString(R.string.others));
        ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(NewRequestActivity.this, android.R.layout.simple_spinner_dropdown_item, hardwareBrandArray);
        LoggerUtility.makeLog(TAG, "Data filled in array adapter");
        mSubCategorySpinner.setAdapter(adapterLicense);
    }


    private void fillWithHardwareTypeList() {
        List<String> hardwareTypeArray = new ArrayList<>();
        int i;
        for (i = 0; i < hardwareTypeList.size(); i++) {
            hardwareTypeArray.add(i, hardwareTypeList.get(i).getType());
        }
        ArrayAdapter<String> adapterBrand = new ArrayAdapter<>(NewRequestActivity.this, android.R.layout.simple_spinner_dropdown_item, hardwareTypeArray);
        LoggerUtility.makeLog(TAG, "Data filled in array adapter");
        mSubCategorySpinner.setAdapter(adapterBrand);

    }

    public void onNothingSelected(AdapterView<?> arg0) {
        // TODO Auto-generated method stub
    }

    private void findViewsById() {
        mIssueDate = (TextView) findViewById(R.id.issued_date);
        mTittle = (EditText)findViewById(R.id.resource_tittle);
        mReqestDescription = (EditText)findViewById(R.id.requestDescription);
        mResourceCategorySpinner = (Spinner)findViewById(R.id.category_spinner);
        mRequestResource = (Button)findViewById(R.id.request_resource_button);

        mSubCategorySpinner = (Spinner)findViewById(R.id.subcategory_spinner);
        mSelectAdminSpinner = (Spinner)findViewById(R.id.admin_list_spinner);

    }
    @Override
    public void onClick(View view) {
       switch(view.getId())
       {
           case R.id.issued_date:
               setDateTimeField();
               mDatePickerDialog.show();
               break;

           case R.id.request_resource_button:
               if(validfields())
               {
                    makeAddNewUserRequestApiCall();
               }
       }
    }

    private void makeAddNewUserRequestApiCall() {
        int pos;
        NewUserRequestSetter newUserRequestSetter = new NewUserRequestSetter();
        newUserRequestSetter.setTitle(mTittle.getText().toString());
        pos=mResourceCategorySpinner.getSelectedItemPosition();
        switch(pos)
        {
            case 0:
                newUserRequestSetter.setType(1);
                pos=mSubCategorySpinner.getSelectedItemPosition();
                newUserRequestSetter.setRequestedDevice(hardwareTypeList.get(pos).getId());
                break;
            case 1:
                newUserRequestSetter.setType(2);
                pos=mSubCategorySpinner.getSelectedItemPosition();
                newUserRequestSetter.setRequestedDevice(softwareDetailsList.get(pos).getID());
                break;
        }
        newUserRequestSetter.setToDate(mIssueDate.getText().toString());
        pos=mSelectAdminSpinner.getSelectedItemPosition();
        newUserRequestSetter.setAssignedTo(adminList.get(pos).getId());
        newUserRequestSetter.setDescription(mReqestDescription.getText().toString());
        SharedPreferences sharedPreferences = this.getSharedPreferences(USERPREFERENCES, Context.MODE_PRIVATE);
        newUserRequestSetter.setUserId(sharedPreferences.getInt(USERID,-1));

        // TODO MAKE API CALL //done
        LoggerUtility.makeLog(TAG, "Tittle : "+ newUserRequestSetter.getTitle());
        LoggerUtility.makeLog(TAG, "Category : "+ newUserRequestSetter.getType());
        LoggerUtility.makeLog(TAG, "Requested Device : "+ newUserRequestSetter.getRequestedDevice());
        LoggerUtility.makeLog(TAG, "Issue Date : "+ newUserRequestSetter.getToDate());
        LoggerUtility.makeLog(TAG, "Assigned to : "+ newUserRequestSetter.getAssignedTo());
        LoggerUtility.makeLog(TAG, "Description : "+ newUserRequestSetter.getDescription());
        LoggerUtility.makeLog(TAG, "User ID : "+ newUserRequestSetter.getUserId());

        final ProgressDialog progressDialog = new ProgressDialog(NewRequestActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = callAPIInterface.newUserRequestResponse(LOGIN_REQUEST_HEADER_VALUE,token,newUserRequestSetter);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<ResponseGetterBase>() {
            @Override
            public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                //response's body
                progressDialog.dismiss();
                try {
                    LoggerUtility.makeLog(TAG, "Response body");
                    if (response.body().getCode() == OK) {
                        LoggerUtility.makeLongToast(getApplicationContext(),response.body().getMessage());
                        Intent i = new Intent(getApplicationContext(),HomeActivity.class);
                        startActivity(i);
                        LoggerUtility.makeLog(TAG, "Validated and Sucessfully Added.");
                    }
                    else if (response.body().getCode() == BAD_REQUEST) {
                        LoggerUtility.makeShortToast(getApplicationContext(), "Invalid ResponseGetterBase");
                        LoggerUtility.makeLongToast(getApplicationContext(),response.body().getMessage());
                    }
                } catch (Exception e) {
                    LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                }
            }

            @Override
            public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                progressDialog.dismiss();
                LoggerUtility.makeLog(TAG, "Error requesting API");
                t.printStackTrace();

            }
        });


    }

    private void setDateTimeField() {           //function to set date in mIssueDate using the date picker
        Calendar newCalendar = Calendar.getInstance();
                mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
                public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                mIssueDate.setText(mDateFormatter.format(newDate.getTime()));

            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }

    private boolean validfields()
    {
        if(LoggerUtility.getTextFromView(mTittle).length()==0)
        {
            LoggerUtility.requestFocusIfError(mTittle,getString(R.string.error_field_required),TAG,"No Value for Title field");
            return false;}

        else if(LoggerUtility.getTextFromView(mIssueDate).length()==0){
            LoggerUtility.requestFocusIfError(mIssueDate,getString(R.string.error_field_required),TAG,"No Value for Issue Date");
            return false;}
        else
            return true;

    }
}
