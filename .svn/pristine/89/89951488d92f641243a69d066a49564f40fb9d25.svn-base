package com.mindfiresolutions.resourcemanager.admin;

import android.app.ProgressDialog;
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.HardwareDetails;
import com.mindfiresolutions.resourcemanager.model.HardwareDetailsByTypeSetter;
import com.mindfiresolutions.resourcemanager.model.TypeSetter;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;
import com.mindfiresolutions.resourcemanager.utility.SharedPref;

import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_NAME;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_TYPE_ID;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_TYPE_NAME;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.TOKEN;

public class HardwareTypeSummary extends AppCompatActivity {
    private static final String TAG = HardwareTypeSummary.class.getSimpleName();
    private int mHardwareTypeId;
    String mHardwareTypeName;
    TextView mHardwareName, mHardwaareMacId, mHardwareAdmin, mHardwareBrand, mHardwareType;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hardware_type_summary);
      //  Bundle extras = getIntent().getExtras();//TODO no bundles
        Intent i = getIntent();

        LoggerUtility.makeLog(TAG, "Intent executed Data received");
        LoggerUtility.makeLog(TAG, "Type id: "+i.getExtras().getInt(HARDWARE_TYPE_ID)+" Type Name: "+i.getExtras().getString(HARDWARE_NAME));

        mHardwareTypeId = i.getExtras().getInt(HARDWARE_TYPE_ID);
        mHardwareTypeName = i.getExtras().getString(HARDWARE_TYPE_NAME);
        initViews();
        mHardwareType.setText(mHardwareTypeName);
        //initialize list of resources. Here resources are another class
        makeViewHardwareSummaryByTypeAPICall(mHardwareTypeId);
    }


private void makeViewHardwareSummaryByTypeAPICall(int hardwareTypeId) {

        String token = SharedPref.getSharedPreferences(this, TOKEN);
        final ProgressDialog progressDialog = new ProgressDialog(HardwareTypeSummary.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        TypeSetter hardwareTypeSetter = new TypeSetter();
        hardwareTypeSetter.setTypeID(mHardwareTypeId);
        Call<HardwareDetailsByTypeSetter> call = callAPIInterface.getHardwareDetailByType(LOGIN_REQUEST_HEADER_VALUE, token, hardwareTypeSetter);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        call.enqueue(new Callback<HardwareDetailsByTypeSetter>() {
                         @Override
                         public void onResponse(Call<HardwareDetailsByTypeSetter> call, Response<HardwareDetailsByTypeSetter> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
//                             try{
                             progressDialog.dismiss();
                             if (response.body().getResponse().getCode() == OK) {
                                 setfields(response.body().getHardwareDetails());
                                 setHardwareDetails(response.body().getHardwareDetails());
                             } else {
                                 LoggerUtility.makeShortToast(getApplicationContext(), response.body().getResponse().getMessage());
                             }
//                             } catch (Exception e) {
//                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
//                             }
                         }

                         @Override
                         public void onFailure(Call<HardwareDetailsByTypeSetter> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );
    }

    private void setfields(List<HardwareDetails> hardwareDetails) {
    }

    private void setHardwareDetails(List<HardwareDetails> hardwareDetails) {
     //   mHardwareName.setText(hardwareDetails.get);
    }


    private void initViews() {
        mHardwareType = (TextView)findViewById(R.id.hardware_type_name);

    }

}
