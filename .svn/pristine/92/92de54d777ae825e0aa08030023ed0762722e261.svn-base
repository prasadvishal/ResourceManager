package com.mindfiresolutions.resourcemanager.admin;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.NewBrandSetter;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.model.SoftwareBrandDetailList;
import com.mindfiresolutions.resourcemanager.model.SoftwareBrandListWithResponse;
import com.mindfiresolutions.resourcemanager.model.SoftwareLicenseList;
import com.mindfiresolutions.resourcemanager.model.SoftwareLicenseListWithResponse;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.Drawer;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;

public class AddNewSoftwareResourceActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener, AdapterView.OnItemSelectedListener {
    private static final String TAG = AddNewSoftwareResourceActivity.class.getSimpleName();
    private EditText mSoftwareName, mSoftwareDescription, mSoftwareVersion;
    private Spinner mBrandDetailSpinner, mLicenceTypeSpinner;
    private SimpleDateFormat mDateFormatter;
    private String spinnerSelectedString;
    private DatePickerDialog mDatePickerDialog;
    private Drawer mDrawer = new Drawer();
    private TextView mPurchaseDate, mValidUptoDate;
    //TODO use these unused fields to fill pojo

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_admin_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        CoordinatorLayout coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinator_app_home);
        LoggerUtility.makeLog(TAG, "outside Coordinator");
        FrameLayout frameLayout = (FrameLayout) coordinatorLayout.findViewById(R.id.content_frame_activity_layout);
        //set the layout inside coordinator layout's frameLayout
        getLayoutInflater().inflate(R.layout.activity_add_new_software_resource, frameLayout);
        LoggerUtility.makeLog(TAG, "Toolbar created");
        mDrawer.setDrawerToggle(findViewById(R.id.drawer_layout), toolbar, this, findViewById(R.id.nav_view));
        LoggerUtility.makeLog(TAG, "after setDrawerToggle");
        changeNavigationView(findViewById(R.id.nav_view));
        // get the date in the required format
        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        mPurchaseDate = (TextView) findViewById(R.id.add_new_software_purchase_date);
        mValidUptoDate = (TextView) findViewById(R.id.add_new_software_valid_upt);
        mSoftwareName = (EditText) findViewById(R.id.add_new_software_name);
        fillTodayDate();
        fillSpinner();
        clickListenerDate(mPurchaseDate);
        clickListenerDate(mValidUptoDate);
    }

    private void buildAlertDialog(int spinnerId) {
        final AlertDialog alertDialog = new AlertDialog.Builder(this).create();
        View dialog_layout = getLayoutInflater().inflate(R.layout.add_new_software_dialog,null);
        //TODO set visibility on and off of other spinner
        //set visibility on and off of other spinner
        TextView brandTxt = (TextView) dialog_layout.findViewById(R.id.add_new_software_dialog_txtView_brand);
        TextView descTxt = (TextView) dialog_layout.findViewById(R.id.add_new_software_dialog_txtView_desc);
        final EditText brandEdt = (EditText) dialog_layout.findViewById(R.id.add_new_software_dialog_edttxt_brand);
        final EditText descEdt = (EditText) dialog_layout.findViewById(R.id.add_new_software_dialog_edttxt_desc);
        LoggerUtility.makeLog(TAG, "inside alert dialog");
        switch (spinnerId) {
            case (R.id.add_new_software_brand_spinner):
                //no need to change alertDialog's layout. Inflate it as it is
                alertDialog.setView(dialog_layout);
                alertDialog.show();
                LoggerUtility.makeLog(TAG, "dialog box created");
                dialogButton(brandEdt.getText().toString(), descEdt.getText().toString());
                break;
        }
        //handle other cases here
        //TODO functionality of 'added by' to be implemented
        //TODO purchase date should be less than valid upto
        //TODO Handle orientation change to stop recreation of new activity.
    }

    //this function deals with the button which is present in dialog
    void dialogButton(final String s1, final String s2) {
        findViewById(R.id.add_new_software_add_button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                LoggerUtility.makeLog(TAG, "dialog button created");
                sendNewBrandDetails(s1, s2);
            }
        });
    }

    //after spinner option for new brand is selected send for new brand request
    //TODO hit api again in spinner touch
    void sendNewBrandDetails(String brand, String desc) {
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        NewBrandSetter newBrandSetter = new NewBrandSetter();
        newBrandSetter.setBrand(brand);
        newBrandSetter.setDescription(desc);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = callAPIInterface.createMasterSoftwareBrandType(LOGIN_REQUEST_HEADER_VALUE, newBrandSetter);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<ResponseGetterBase>() {
                         @Override
                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getCode() == OK) {
                                     LoggerUtility.makeShortToast(getApplicationContext(), response.body().getMessage());
                                 }
                             } catch (Exception e) {
                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawer.onBackPressed(drawerLayout);
        } else
            super.onBackPressed();

    }

    @Override
    public boolean onNavigationItemSelected(@NonNull  MenuItem item) {
        return mDrawer.onNavigationItemSelectedAdmin(item, this, findViewById(R.id.drawer_layout));

    }

    void fillTodayDate() {
        TextView todayDate = (TextView) findViewById(R.id.add_new_software_curnt_date);
        long date = System.currentTimeMillis();
        LoggerUtility.makeLog(TAG, "inside fill TodayDate");
        SimpleDateFormat sdf = new SimpleDateFormat("MMM MM dd, yyyy h:mm a", Locale.ENGLISH);
        String dateString = sdf.format(date);
        todayDate.setText(dateString);
    }

    void fillSpinner() {
        //TODO set spinner hint
        //fill spinner with the data coming from server
        mLicenceTypeSpinner = (Spinner) findViewById(R.id.add_new_software_licence_spinner);
        mBrandDetailSpinner = (Spinner) findViewById(R.id.add_new_software_brand_spinner);
        mLicenceTypeSpinner.setOnItemSelectedListener(this);
        mBrandDetailSpinner.setOnItemSelectedListener(this);
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<SoftwareLicenseListWithResponse> call = callAPIInterface.getMasterSoftwareLicenseType(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<SoftwareLicenseListWithResponse>() {
                         @Override
                         public void onResponse(Call<SoftwareLicenseListWithResponse> call, Response<SoftwareLicenseListWithResponse> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getResponse().getCode() == OK) {
                                     List<SoftwareLicenseList> softwareLicenceList = response.body().getSoftwareLicenseList();
                                     List<String> softwareLicenceTypeArray = new ArrayList<>();
                                     int i;
                                     for (i = 0; i < softwareLicenceList.size(); i++) {
                                         softwareLicenceTypeArray.add(i, softwareLicenceList.get(i).getLicenseDetails());
                                     }
                                     softwareLicenceTypeArray.add(i, getString(R.string.add_new_license));
                                     ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, softwareLicenceTypeArray);
                                     LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                     mLicenceTypeSpinner.setAdapter(adapterLicense);
                                 }
                             } catch (Exception e) {
                                 LoggerUtility.makeShortToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<SoftwareLicenseListWithResponse> call, Throwable t) {
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }

        );

        Call<SoftwareBrandListWithResponse> callBrand = callAPIInterface.getMasterSoftwareBrandDetail(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        callBrand.enqueue(new Callback<SoftwareBrandListWithResponse>() {
                              @Override
                              public void onResponse(Call<SoftwareBrandListWithResponse> call, Response<SoftwareBrandListWithResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  try {
                                      if (response.body().getResponse().getCode() == OK) {
                                          List<SoftwareBrandDetailList> softwareBrandList = response.body().getSoftwareBrandDetailsList();
                                          List<String> softwareBrandArray = new ArrayList<>();
                                          int i;
                                          for (i = 0; i < softwareBrandList.size(); i++) {
                                              softwareBrandArray.add(i, softwareBrandList.get(i).getBrand());
                                          }
                                          softwareBrandArray.add(i, getString(R.string.add_new_brand));
                                          ArrayAdapter<String> adapterBrand = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, softwareBrandArray);
                                          LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                          mBrandDetailSpinner.setAdapter(adapterBrand);
                                      }
                                  } catch (Exception e) {
                                      LoggerUtility.makeShortToast(getApplicationContext(), getString(R.string.error_requesting_api));
                                  }
                              }

                              @Override
                              public void onFailure(Call<SoftwareBrandListWithResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        //once spinner is selected this api will be called , parent is the apinner which is selected and spinnerSelectedString is the selected option
        spinnerSelectedString = parent.getItemAtPosition(position).toString();
        LoggerUtility.makeLog(TAG, "inside switch default case" + parent.getId());
        switch (parent.getId()) {
            //if selected string is add new resource, add new resource api will be called else set it to pojo
            case (R.id.add_new_software_licence_spinner):
                LoggerUtility.makeLog(TAG, "inside switch case" + parent.getId());
                //use switch to compare selected string
                switch (spinnerSelectedString) {
                    case ("+ Add new Brand"):
                        buildAlertDialog(R.id.add_new_software_brand_spinner);
                        break;
                }
                //TODO handle pojo setter here
                break;
            case (R.id.add_new_software_brand_spinner):
                //TODO not sure about spinners
            default:
                LoggerUtility.makeLog(TAG, "inside switch default case" + parent.getId());
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {
        //if nothing selected by user
        spinnerSelectedString = getString(R.string.nothing_selected);
        LoggerUtility.makeLog(TAG, "inside on nothing selected");
    }

    private void setDateTimeField(final int viewId) {//function to set date in mIssueDate using the date picker
        Calendar newCalendar = Calendar.getInstance();
        mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                ((TextView) findViewById(viewId)).setText(mDateFormatter.format(newDate.getTime()));
            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }

    private void clickListenerDate(final TextView date) {
        date.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                setDateTimeField(date.getId());
                mDatePickerDialog.show();
            }
        });
    }

    void changeNavigationView(View view) {
        NavigationView navigationView = (NavigationView) view;
        navigationView.getMenu().clear();
        navigationView.inflateMenu(R.menu.admin_home_drawer_menu);
        //change header text to admin
        View admin_view = navigationView.getHeaderView(0);
        TextView admin_txt = (TextView) admin_view.findViewById(R.id.name_user);
        //TODO complete admin name here
        admin_txt.setText(getString(R.string.admin));
        navigationView.setNavigationItemSelectedListener(this);

    }
}

