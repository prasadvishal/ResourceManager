package com.mindfiresolutions.resourcemanager.admin;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.SoftwareBrandDetailList;
import com.mindfiresolutions.resourcemanager.model.SoftwareBrandListWithResponse;
import com.mindfiresolutions.resourcemanager.model.SoftwareLicenseList;
import com.mindfiresolutions.resourcemanager.model.SoftwareLicenseListWithResponse;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.Drawer;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;

public class AddNewSoftwareResourceActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener, AdapterView.OnItemSelectedListener {
    private static final String TAG = AddNewSoftwareResourceActivity.class.getSimpleName();
    private EditText mSoftwareName, mSoftwareDescription, mSoftwareVersion;
    private Spinner mBrandDetailSpinner, mLicenceTypeSpinner;
    private SimpleDateFormat mDateFormatter;
    String spinnerSelectedString = "";
    private DatePickerDialog mDatePickerDialog;
    private Drawer mDrawer = new Drawer();
    private TextView mPurchaseDate, mValidUptoDate;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_admin_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        CoordinatorLayout coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinator_app_home);
        LoggerUtility.makeLog(TAG, "outside Coordinator");
        FrameLayout frameLayout = (FrameLayout) coordinatorLayout.findViewById(R.id.content_frame_activity_layout);
        getLayoutInflater().inflate(R.layout.activity_add_new_software_resource, frameLayout);
        LoggerUtility.makeLog(TAG, "Toolbar created");
        mDrawer.setDrawerToggle(findViewById(R.id.drawer_layout), toolbar, this, findViewById(R.id.nav_view));
        LoggerUtility.makeLog(TAG, "after setDrawerToggle");
        changeNavigationView(findViewById(R.id.nav_view));
        // get the listview
        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        mPurchaseDate = (TextView) findViewById(R.id.add_new_software_purchase_date);
        mValidUptoDate = (TextView) findViewById(R.id.add_new_software_valid_upt);
        mSoftwareName = (EditText) findViewById(R.id.add_new_software_name);
        fillTodayDate();
        fillSpinner();
        clickListenerDate(mPurchaseDate);
        clickListenerDate(mValidUptoDate);
        //   buildAlertDialog();
    }

    private void buildAlertDialog(int spinnerId) {
        final AlertDialog alertDialog = new AlertDialog.Builder(this).create();
        View dialog_layout = getLayoutInflater().inflate(R.layout.add_new_software_dialog, null);
        LoggerUtility.makeLog(TAG, "inside alert dialog");
        EditText brand = (EditText) dialog_layout.findViewById(R.id.editText);
        EditText description = (EditText) dialog_layout.findViewById(R.id.editText2);

        alertDialog.setView(dialog_layout);
        alertDialog.show();

        //TODO purchase date should be less than valid upto
        //TODO Handle orientation change to stop recreation of new activity.

    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawer.onBackPressed(drawerLayout);
        } else
            super.onBackPressed();

    }

    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        return mDrawer.onNavigationItemSelectedAdmin(item, this, findViewById(R.id.drawer_layout));

    }

    void fillTodayDate() {
        TextView todayDate = (TextView) findViewById(R.id.add_new_software_curnt_date);
        long date = System.currentTimeMillis();
        LoggerUtility.makeLog(TAG, "inside fill TodayDate");
        SimpleDateFormat sdf = new SimpleDateFormat("MMM MM dd, yyyy h:mm a", Locale.ENGLISH);
        String dateString = sdf.format(date);
        todayDate.setText(dateString);
    }

    void fillSpinner() {
        mLicenceTypeSpinner = (Spinner) findViewById(R.id.add_new_software_licence_spinner);
        mBrandDetailSpinner = (Spinner) findViewById(R.id.add_new_software_brand_spinner);
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        Call<SoftwareLicenseListWithResponse> call = callAPIInterface.getMasterSoftwareLicenseType(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        call.enqueue(new Callback<SoftwareLicenseListWithResponse>() {
                         @Override
                         public void onResponse(Call<SoftwareLicenseListWithResponse> call, Response<SoftwareLicenseListWithResponse> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             if (response.body().getResponse().getCode() == OK) {
                                 List<SoftwareLicenseList> softwareLicenceList = response.body().getSoftwareLicenseList();
                                 List<String> softwareLicenceTypeArray = new ArrayList<>();
                                 int i;
                                 for (i = 0; i < softwareLicenceList.size(); i++) {
                                     softwareLicenceTypeArray.add(i, softwareLicenceList.get(i).getLicenseDetails());
                                 }
                                 softwareLicenceTypeArray.add(i, getString(R.string.others));
                                 ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, softwareLicenceTypeArray);
                                 LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                 mLicenceTypeSpinner.setAdapter(adapterLicense);
                             }
                         }

                         @Override
                         public void onFailure(Call<SoftwareLicenseListWithResponse> call, Throwable t) {
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }

        );

        Call<SoftwareBrandListWithResponse> callBrand = callAPIInterface.getMasterSoftwareBrandDetail(LOGIN_REQUEST_HEADER_VALUE);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        callBrand.enqueue(new Callback<SoftwareBrandListWithResponse>() {
                              @Override
                              public void onResponse(Call<SoftwareBrandListWithResponse> call, Response<SoftwareBrandListWithResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  if (response.body().getResponse().getCode() == OK) {
                                      List<SoftwareBrandDetailList> softwareBrandList = response.body().getSoftwareBrandDetailsList();
                                      List<String> softwareBrandArray = new ArrayList<>();
                                      int i;
                                      for (i = 0; i < softwareBrandList.size(); i++) {
                                          softwareBrandArray.add(i, softwareBrandList.get(i).getBrand());
                                      }
                                      softwareBrandArray.add(i, getString(R.string.others));
                                      ArrayAdapter<String> adapterBrand = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, softwareBrandArray);
                                      LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                      mBrandDetailSpinner.setAdapter(adapterBrand);
                                  }
                              }

                              @Override
                              public void onFailure(Call<SoftwareBrandListWithResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );
    }

    //TODO
    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        spinnerSelectedString = parent.getItemAtPosition(position).toString();
        switch (parent.getId()) {
            case (R.id.add_new_software_licence_spinner):
                getSelectedString(spinnerSelectedString, R.id.add_new_software_licence_spinner);
                LoggerUtility.makeLog(TAG, "inside switch case"+parent.getId());
                break;
            case(R.id.add_new_software_brand_spinner):
                getSelectedString(spinnerSelectedString, R.id.add_new_software_brand_spinner);
                LoggerUtility.makeLog(TAG, "inside switch case"+parent.getId());
                break;
            default:
                LoggerUtility.makeLog(TAG, "inside switch default case"+parent.getId());

        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {
        spinnerSelectedString = getString(R.string.nothing_selected);
    }


    void getSelectedString(String string, int spinnerId) {
        LoggerUtility.makeLog(TAG, string + "inside getSelectedString");
        switch (spinnerId) {
            case (R.id.add_new_software_brand_spinner): {
                switch (spinnerId) {

                }

                break;
            }
            case (R.id.add_new_software_licence_spinner): {
                break;
            }
        }


    }

    private void setDateTimeField(final int viewId) {//function to set date in mIssueDate using the date picker
//        findViewById(viewId).setOnClickListener(this);
        Calendar newCalendar = Calendar.getInstance();
        mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                ((TextView) findViewById(viewId)).setText(mDateFormatter.format(newDate.getTime()));
            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }

    private void clickListenerDate(final TextView date) {
        date.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                setDateTimeField(date.getId());
                mDatePickerDialog.show();
            }
        });
    }

    void changeNavigationView(View view) {
        NavigationView navigationView = (NavigationView) view;
        navigationView.getMenu().clear();
        navigationView.inflateMenu(R.menu.admin_home_drawer_menu);
        //change header text to admin
        View admin_view = navigationView.getHeaderView(0);
        TextView admin_txt = (TextView) admin_view.findViewById(R.id.name_user);
        //TODO complete admin name here
        admin_txt.setText(getString(R.string.admin));
        navigationView.setNavigationItemSelectedListener(this);

    }
}

