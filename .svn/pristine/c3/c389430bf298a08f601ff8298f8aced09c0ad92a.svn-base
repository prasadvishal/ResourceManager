package com.mindfiresolutions.resourcemanager.admin;

/**
 * Created by: Shivangi on 7th April
 * Last Modified on: 05/29//2017
 */

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.AddNewSoftwareResourceSetter;
import com.mindfiresolutions.resourcemanager.model.AdminListResponse;
import com.mindfiresolutions.resourcemanager.model.AdminListSetter;
import com.mindfiresolutions.resourcemanager.model.NewBrandSetter;
import com.mindfiresolutions.resourcemanager.model.NewLicenseSetter;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.model.SoftwareBrandDetailList;
import com.mindfiresolutions.resourcemanager.model.SoftwareBrandListWithResponse;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetails;
import com.mindfiresolutions.resourcemanager.model.SoftwareLicenseList;
import com.mindfiresolutions.resourcemanager.model.SoftwareLicenseListWithResponse;
import com.mindfiresolutions.resourcemanager.model.UpdateSoftwareSetter;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.Drawer;
import com.mindfiresolutions.resourcemanager.utility.InternetConnections;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;
import com.mindfiresolutions.resourcemanager.utility.SharedPref;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_COUNT;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_DETAILS;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_ID;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.NAMEKEY;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.TOKEN;

public class AddNewSoftwareResourceActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener, AdapterView.OnItemSelectedListener, View.OnClickListener {
    private static final String TAG = AddNewSoftwareResourceActivity.class.getSimpleName();
    private EditText mSoftwareName, mSoftwareDescription, mSoftwareVersion, mSoftwareCount, mSoftwareLicenceKey;
    private Spinner mBrandDetailSpinner, mLicenceTypeSpinner, mSelectAdminSpinner;
    private SimpleDateFormat mDateFormatter;
    private String mSpinnerSelectedString;
    private int mSoftwareId;
    private DatePickerDialog mDatePickerDialog;
    private Drawer mDrawer = new Drawer();
    private TextView mPurchaseDate, mValidUptoDate;
    private AddNewSoftwareResourceSetter mAddNewSoftwareResourceSetter;
    private UpdateSoftwareSetter mUpdateSoftwareSetter;
    private List<SoftwareBrandDetailList> mSoftwareBrandList;
    private List<SoftwareLicenseList> mSoftwareLicenceList;
    private List<AdminListSetter> adminList;
    private Button mAddUpdateBtn;
    private boolean mIsEditing;
    private Intent i;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        i = getIntent();
        setContentView(R.layout.activity_admin_main);
        makeDrawer();
        initViews();
        mUpdateSoftwareSetter = new UpdateSoftwareSetter();
        mAddNewSoftwareResourceSetter = new AddNewSoftwareResourceSetter();
        mSoftwareBrandList = new ArrayList<>();
        mSoftwareLicenceList = new ArrayList<>();
        // get the date in the required format
        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        mPurchaseDate.setOnClickListener(this);
        mValidUptoDate.setOnClickListener(this);
        fillTodayDate();
        //first check with internet connection then only proceed with api calling
        if (InternetConnections.checkInternetConnection(getApplicationContext())) {
            LoggerUtility.makeLog(TAG, "INTERNET connection available");
            fillSpinner();
        } else {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.no_internet));
        }
        mAddUpdateBtn.setOnClickListener(this);
        if (i.hasExtra(SOFTWARE_DETAILS)) {
            mIsEditing = true;
            mAddUpdateBtn.setText(getString(R.string.update));
            SoftwareDetails softwareDetails = i.getExtras().getParcelable(SOFTWARE_DETAILS);
            int totalCount = i.getExtras().getInt(SOFTWARE_COUNT);
            String count = Integer.toString(totalCount);
            mSoftwareId = i.getIntExtra(SOFTWARE_ID, 0);
            mSoftwareCount.setText(count);
            prefillDetails(softwareDetails);

            //callEditSoftwareSetterApi();
        }
    }

    private void setUpdateSoftwareSetter() {


        mUpdateSoftwareSetter.setDescription(mSoftwareDescription.getText().toString());
        mUpdateSoftwareSetter.setVersion(mSoftwareVersion.getText().toString());
        mUpdateSoftwareSetter.setSoftwareName(mSoftwareName.getText().toString());
        mUpdateSoftwareSetter.setLicenseType(mSoftwareLicenceList.get(mLicenceTypeSpinner.getSelectedItemPosition() - 1).getID());
        mUpdateSoftwareSetter.setSoftwareBrand(mSoftwareBrandList.get(mBrandDetailSpinner.getSelectedItemPosition() - 1).getID());
        mUpdateSoftwareSetter.setSoftwareID(mSoftwareId);
        mUpdateSoftwareSetter.setModifiedBy(SharedPref.getSharedPreferences(this, NAMEKEY));

        LoggerUtility.makeLog(TAG, "Modified By : " + mUpdateSoftwareSetter.getModifiedBy());
        LoggerUtility.makeLog(TAG, "Description : " + mUpdateSoftwareSetter.getDescription());
        LoggerUtility.makeLog(TAG, "License Type : " + mUpdateSoftwareSetter.getLicenseType());
        LoggerUtility.makeLog(TAG, "Software Brand : " + mUpdateSoftwareSetter.getSoftwareBrand());
        LoggerUtility.makeLog(TAG, "Software Name : " + mUpdateSoftwareSetter.getSoftwareName());
        LoggerUtility.makeLog(TAG, "Version : " + mUpdateSoftwareSetter.getVersion());
        LoggerUtility.makeLog(TAG, "Software ID : " + mSoftwareId);
    }


    void prefillDetails(SoftwareDetails softwareDetails) {
        mSoftwareDescription.setText(softwareDetails.getDescription());
        mSoftwareName.setText(softwareDetails.getSoftwareName());
        mSoftwareVersion.setText(softwareDetails.getVersion());
        mPurchaseDate.setText(softwareDetails.getCreationDate());
        mSoftwareLicenceKey.setText(softwareDetails.getLicenseTypeName());
    }

    private boolean validfields()      //to validate fields befor making API call
    {
        if (LoggerUtility.getTextFromView(mSoftwareName).length() == 0) {
            LoggerUtility.requestFocusIfError(mSoftwareName, getString(R.string.error_field_required), TAG, "Error: Software Name is Empty");
            return false;
        }

        if (mBrandDetailSpinner.getSelectedItemPosition() == 0) {
            LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.prompt_brand_selection));
            mBrandDetailSpinner.performClick();
            return false;
        }
        if (LoggerUtility.getTextFromView(mSoftwareVersion).length() == 0) {
            LoggerUtility.requestFocusIfError(mSoftwareVersion, getString(R.string.error_field_required), TAG, "Error: Software Version is Empty");
            return false;
        }
        if (mLicenceTypeSpinner.getSelectedItemPosition() == 0) {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.prompt_licence_type_selection));
            mLicenceTypeSpinner.performClick();
            return false;
        }
        if (LoggerUtility.getTextFromView(mSoftwareCount).length() == 0) {
            LoggerUtility.requestFocusIfError(mSoftwareCount, getString(R.string.error_field_required), TAG, "Error: Software Count is Empty");
            return false;
        }
        if (LoggerUtility.getTextFromView(mSoftwareLicenceKey).length() == 0) {
            LoggerUtility.requestFocusIfError(mSoftwareLicenceKey, getString(R.string.error_field_required), TAG, "Error: Software Licence Key is Empty");
            return false;
        }
        if (LoggerUtility.getTextFromView(mPurchaseDate).length() == 0) {
            LoggerUtility.requestFocusIfError(mPurchaseDate, getString(R.string.error_field_required), TAG, "Error: Purchase date is Empty");
            return false;
        }
        if (LoggerUtility.getTextFromView(mValidUptoDate).length() == 0) {
            LoggerUtility.requestFocusIfError(mValidUptoDate, getString(R.string.error_field_required), TAG, "Error: No Value for Valid upto date");
            return false;
        }

        if (mSelectAdminSpinner.getSelectedItemPosition() == 0) {
            LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.nothing_selected));
            mSelectAdminSpinner.performClick();
            return false;
        }

        return true;
    }

    public void onClick(View view) {
        switch (view.getId()) {
            case (R.id.add_new_software_purchase_date):
                TextView tvPurchaseDate = (TextView) findViewById(R.id.add_new_software_purchase_date);
                setDateTimeField(R.id.add_new_software_purchase_date);
                mDatePickerDialog.show();
                if (!(tvPurchaseDate.getText().equals(null)))
                    mAddNewSoftwareResourceSetter.setPurchasedDate(tvPurchaseDate.getText().toString());
                break;
            case (R.id.add_new_software_valid_upt):
                TextView tvValidUpto = (TextView) findViewById(R.id.add_new_software_purchase_date);
                setDateTimeField(R.id.add_new_software_valid_upt);
                mDatePickerDialog.show();
                if (!(tvValidUpto.getText().equals(null)))
                    mAddNewSoftwareResourceSetter.setPurchasedDate(tvValidUpto.getText().toString());
                break;
            case (R.id.add_new_software_add_software_button):
                if (validfields()) {
                    if (i.hasExtra(SOFTWARE_DETAILS)) {
                        setUpdateSoftwareSetter();
                        callEditSoftwareSetterApi();
                    } else {
                        setAddNewSoftwareResourceSetter();
                        callAddNewSoftwareSetterApi();
                    }
                }
                break;

        }

    }

    private void initViews() {
        mPurchaseDate = (TextView) findViewById(R.id.add_new_software_purchase_date);
        mValidUptoDate = (TextView) findViewById(R.id.add_new_software_valid_upt);
        mSoftwareName = (EditText) findViewById(R.id.add_new_software_name);
        mSoftwareVersion = (EditText) findViewById(R.id.add_new_software_add_version);
        mSoftwareDescription = (EditText) findViewById(R.id.new_software_rqst_desc);
        mSoftwareCount = (EditText) findViewById(R.id.add_new_software_software_count_edttxt);
        mSoftwareLicenceKey = (EditText) findViewById(R.id.add_new_software_licence_key);
        mAddUpdateBtn = (Button) findViewById(R.id.add_new_software_add_software_button);
        mAddUpdateBtn.setText(getString(R.string.add_software));
        mLicenceTypeSpinner = (Spinner) findViewById(R.id.add_new_software_licence_spinner);
        mBrandDetailSpinner = (Spinner) findViewById(R.id.add_new_software_brand_spinner);
        mSelectAdminSpinner = (Spinner) findViewById(R.id.admin_list_spinner);
        mSelectAdminSpinner.setOnItemSelectedListener(this);
        mLicenceTypeSpinner.setOnItemSelectedListener(this);
        mBrandDetailSpinner.setOnItemSelectedListener(this);
    }

    private void makeDrawer() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        FrameLayout frameLayout = (FrameLayout) findViewById(R.id.content_frame_activity_layout);
        //set the layout inside coordinator layout's frameLayout
        getLayoutInflater().inflate(R.layout.activity_add_new_software_resource, frameLayout);
        LoggerUtility.makeLog(TAG, "Toolbar created");
        mDrawer.setDrawerToggle(findViewById(R.id.drawer_layout), toolbar, this, findViewById(R.id.nav_view));
        LoggerUtility.makeLog(TAG, "after setDrawerToggle");
        changeNavigationView(findViewById(R.id.nav_view));
    }

    private void buildAlertDialog(int spinnerId) {
        final AlertDialog alertDialog = new AlertDialog.Builder(this).create();
        View dialog_layout;
        switch (spinnerId) {
            case (R.id.add_new_software_brand_spinner):
                dialog_layout = getLayoutInflater().inflate(R.layout.add_new_software_dialog, null);
                //set visibility on and off of other spinner
                TextView brandTxt = (TextView) dialog_layout.findViewById(R.id.add_new_software_dialog_txtView_brand);
                TextView descTxt = (TextView) dialog_layout.findViewById(R.id.add_new_software_dialog_txtView_desc);
                final EditText brandEdt = (EditText) dialog_layout.findViewById(R.id.add_new_software_dialog_edttxt_brand);
                final EditText descEdt = (EditText) dialog_layout.findViewById(R.id.add_new_software_dialog_edttxt_desc);
                LoggerUtility.makeLog(TAG, "inside brand alert dialog");
                //no need to change alertDialog's layout. Inflate it as it is
                alertDialog.setView(dialog_layout);
                alertDialog.show();
                LoggerUtility.makeLog(TAG, "dialog box created");
                //dialogButton();
                dialog_layout.findViewById(R.id.add_new_software_dialog_add_button).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        LoggerUtility.makeLog(TAG, "dialog button created");
                        sendNewBrandDetails(brandEdt.getText().toString(), descEdt.getText().toString());
                        alertDialog.dismiss();
                    }
                });
                break;
            case (R.id.add_new_software_licence_spinner):
                dialog_layout = getLayoutInflater().inflate(R.layout.add_new_software_license_type_dialog, null);
                //set visibility on and off of other spinner
                final EditText licenseEdt = (EditText) dialog_layout.findViewById(R.id.add_new_software_license_dialog_edttxt);
                LoggerUtility.makeLog(TAG, "inside license alert dialog");
                //no need to change alertDialog's layout. Inflate it as it is
                alertDialog.setView(dialog_layout);
                alertDialog.show();
                LoggerUtility.makeLog(TAG, "license dialog box created");
                //dialogButton();
                dialog_layout.findViewById(R.id.add_new_software_license_dialog_btn).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        LoggerUtility.makeLog(TAG, "dialog button created");
                        sendNewLicenseDetails(licenseEdt.getText().toString());
                        alertDialog.dismiss();
                    }
                });
                break;

        }
    }

    private void sendNewLicenseDetails(String s) {
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        NewLicenseSetter newLicenseSetter = new NewLicenseSetter();
        newLicenseSetter.setLicenseDetails(s);
        newLicenseSetter.setIsAvailable(true);
        final String token = SharedPref.getSharedPreferences(this, TOKEN);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = callAPIInterface.createMasterSoftwareLicenseType(LOGIN_REQUEST_HEADER_VALUE, token, newLicenseSetter);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<ResponseGetterBase>() {
                         @Override
                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getCode() == OK) {
                                     LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getMessage());

                                 }
                             } catch (Exception e) {
                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                             progressDialog.dismiss();
                             LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.server_error));

                         }
                     }
        );
    }

    //this function deals with the button which is present in dialog
    void dialogButton(final String s1, final String s2) {
        findViewById(R.id.add_new_software_dialog_add_button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                LoggerUtility.makeLog(TAG, "dialog button created");
                sendNewBrandDetails(s1, s2);
            }
        });
    }

    //after spinner option for new brand is selected send for new brand request
    //TODO hit api again in spinner touch
    void sendNewBrandDetails(String brand, String desc) {
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        NewBrandSetter newBrandSetter = new NewBrandSetter();
        newBrandSetter.setBrand(brand);
        newBrandSetter.setDescription(desc);
        final String token = SharedPref.getSharedPreferences(this, TOKEN);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = callAPIInterface.createMasterSoftwareBrandType(LOGIN_REQUEST_HEADER_VALUE, token, newBrandSetter);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<ResponseGetterBase>() {
                         @Override
                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getCode() == OK) {
                                     LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getMessage());

                                 }
                             } catch (Exception e) {
                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                             LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.server_error));
                         }
                     }
        );
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawer.onBackPressed(drawerLayout);
        } else
            super.onBackPressed();

    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        return mDrawer.onNavigationItemSelectedAdmin(item, this, findViewById(R.id.drawer_layout));

    }

    void fillTodayDate() {
        TextView todayDate = (TextView) findViewById(R.id.add_new_software_curnt_date);
        long date = System.currentTimeMillis();
        LoggerUtility.makeLog(TAG, "inside fill TodayDate");
        SimpleDateFormat sdf = new SimpleDateFormat("MMM MM dd, yyyy h:mm a", Locale.ENGLISH);
        String dateString = sdf.format(date);
        todayDate.setText(dateString);
    }

    void fillSpinner() {
        //fill spinner with the data coming from server
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        final String token = SharedPref.getSharedPreferences(this, TOKEN);
        Call<SoftwareLicenseListWithResponse> call = callAPIInterface.getMasterSoftwareLicenseType(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<SoftwareLicenseListWithResponse>() {
                         @Override
                         public void onResponse(Call<SoftwareLicenseListWithResponse> call, Response<SoftwareLicenseListWithResponse> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getResponse().getCode() == OK) {
                                     mSoftwareLicenceList = response.body().getSoftwareLicenseList();
                                     List<String> softwareLicenceTypeArray = new ArrayList<>();
                                     int i = 0;
                                     softwareLicenceTypeArray.add(i, getString(R.string.tap_to_select));
                                     for (i = 0; i < mSoftwareLicenceList.size(); ++i) {
                                         softwareLicenceTypeArray.add(i + 1, mSoftwareLicenceList.get(i).getLicenseDetails());
                                     }
                                     softwareLicenceTypeArray.add(i + 1, getString(R.string.add_new_license));
                                     //TODO make custom adapter
                                     ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, softwareLicenceTypeArray);
                                     LoggerUtility.makeLog(TAG, "Data filled in array adapter");

                                     adapterLicense.setDropDownViewResource(R.layout.customized_spinner_dropdown);
                                     mLicenceTypeSpinner.setAdapter(adapterLicense);
                                 } else {
                                     LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getResponse().getMessage());
                                 }
                             } catch (Exception e) {
                                 LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.error_requesting_api));
                             }

                         }

                         @Override
                         public void onFailure(Call<SoftwareLicenseListWithResponse> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }

        );

        Call<AdminListResponse> callAdmin = callAPIInterface.getAdminList(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object in hardware type detailse");
        callAdmin.enqueue(new Callback<AdminListResponse>() {
                              @Override
                              public void onResponse(Call<AdminListResponse> call, Response<AdminListResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  if (response.body().getResponse().getCode() == OK) {
                                      adminList = response.body().getAdminListSetter();
                                      fillAdminSpinner();
                                  }
                              }

                              @Override
                              public void onFailure(Call<AdminListResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );

        Call<SoftwareBrandListWithResponse> callBrand = callAPIInterface.getMasterSoftwareBrandDetail(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        callBrand.enqueue(new Callback<SoftwareBrandListWithResponse>() {
                              @Override
                              public void onResponse(Call<SoftwareBrandListWithResponse> call, Response<SoftwareBrandListWithResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  try {
                                      if (response.body().getResponse().getCode() == OK) {
                                          mSoftwareBrandList = response.body().getSoftwareBrandDetailsList();
                                          List<String> softwareBrandArray = new LinkedList<>();
                                          int i = 0;
                                          softwareBrandArray.add(i, getString(R.string.tap_to_select));
                                          for (i = 0; i < mSoftwareBrandList.size(); i++) {
                                              //TODO use FOR EACH loop
                                              softwareBrandArray.add(i + 1, mSoftwareBrandList.get(i).getBrand());
                                          }
                                          softwareBrandArray.add(i + 1, getString(R.string.add_new_brand));
                                          //TODO make custom adapter
                                          ArrayAdapter<String> adapterBrand = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, softwareBrandArray);
                                          LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                          adapterBrand.setDropDownViewResource(R.layout.customized_spinner_dropdown);
                                          mBrandDetailSpinner.setAdapter(adapterBrand);
                                      } else {
                                          LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getResponse().getMessage());
                                      }
                                  } catch (Exception e) {
                                      LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.error_requesting_api));
                                  }
                              }

                              @Override
                              public void onFailure(Call<SoftwareBrandListWithResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );
    }

    private void fillAdminSpinner() {
        List<String> adminListArray = new ArrayList<>();
        int i = 0;
        String fullname = "";
        adminListArray.add(i, getString(R.string.tap_to_select));
        for (i = 1; i < adminList.size(); i++) {
            fullname = adminList.get(i - 1).getFirstname() + " " + adminList.get(i - 1).getLastname();
            adminListArray.add(i, fullname);
        }
        ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(AddNewSoftwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, adminListArray);
        LoggerUtility.makeLog(TAG, "Data filled in array adapter");
        adapterLicense.setDropDownViewResource(R.layout.customized_spinner_dropdown);
        mSelectAdminSpinner.setAdapter(adapterLicense);
    }


    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        //once spinner is selected this api will be called , parent is the apinner which is selected and mSpinnerSelectedString is the selected option
        mSpinnerSelectedString = parent.getItemAtPosition(position).toString();
        LoggerUtility.makeLog(TAG, "inside switch default case" + parent.getId());
        switch (parent.getId()) {
            //if selected string is add new resource, add new resource api will be called else set it to pojo
            case (R.id.add_new_software_licence_spinner):
                LoggerUtility.makeLog(TAG, "inside switch case" + parent.getId());
                //use switch to compare selected string
                if (position == parent.getCount() - 1) {
                    buildAlertDialog(R.id.add_new_software_licence_spinner);
                } else if (position == 0) {
                    //LoggerUtility.ToastGeneratorShort();(AddNewSoftwareResourceActivity.this, "pls select option");
                } else {
                    LoggerUtility.ToastGeneratorShort(AddNewSoftwareResourceActivity.this, mSpinnerSelectedString);

                }
                break;
            case (R.id.add_new_software_brand_spinner):
                LoggerUtility.makeLog(TAG, "inside switch case" + parent.getId());
                LoggerUtility.makeLog(TAG, "Brand Spinner has: " + mBrandDetailSpinner.getCount() + " Entries");
                LoggerUtility.makeLog(TAG, "Brand SpinnerAdapter has: " + mBrandDetailSpinner.getAdapter().getCount() + " Entries");
                for (int i = 0; i < mBrandDetailSpinner.getCount(); i++)
                    LoggerUtility.makeLog(TAG, "Brand Spinner value at " + i + " :  " + mBrandDetailSpinner.getItemAtPosition(i));

                //use switch to compare selected string
                if (position == mBrandDetailSpinner.getCount() - 1) {
                    //todo get size of spinner
                    LoggerUtility.makeLog(TAG, "Last Position Clicked ");
                    buildAlertDialog(R.id.add_new_software_brand_spinner);
                } else if (position == 0) {
                    //   LoggerUtility.ToastGeneratorShort();(AddNewSoftwareResourceActivity.this, "pls select option");
                    LoggerUtility.makeLog(TAG, "0th Position Clicked");
                } else {
                    LoggerUtility.ToastGeneratorShort(AddNewSoftwareResourceActivity.this, mSpinnerSelectedString);
                    LoggerUtility.makeLog(TAG, " Position Clicked: " + position);
                    // mAddNewSoftwareResourceSetter.setSoftwareBrand(mSoftwareBrandList.get(position).getID());
                }
                break;

            default:
                LoggerUtility.makeLog(TAG, "inside switch default case" + parent.getId());
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {
        //if nothing selected by user
        mSpinnerSelectedString = getString(R.string.nothing_selected);
        LoggerUtility.makeLog(TAG, "inside on nothing selected");
    }

    private void setDateTimeField(final int viewId) {//function to set date in mIssueDate using the date picker
        Calendar newCalendar = Calendar.getInstance();
        mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                ((TextView) findViewById(viewId)).setText(mDateFormatter.format(newDate.getTime()));
            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }

    void changeNavigationView(View view) {
        NavigationView navigationView = (NavigationView) view;
        navigationView.getMenu().clear();
        navigationView.inflateMenu(R.menu.admin_home_drawer_menu);
        //change header text to admin
        View admin_view = navigationView.getHeaderView(0);
        TextView admin_txt = (TextView) admin_view.findViewById(R.id.name_user);
        admin_txt.setText(getString(R.string.admin));
        navigationView.setNavigationItemSelectedListener(this);

    }

    void setAddNewSoftwareResourceSetter() {
        mAddNewSoftwareResourceSetter.setCreatedBy(SharedPref.getSharedPreferences(this, NAMEKEY));
        mAddNewSoftwareResourceSetter.setDescription(mSoftwareDescription.getText().toString());
        mAddNewSoftwareResourceSetter.setVersion(mSoftwareVersion.getText().toString());
        mAddNewSoftwareResourceSetter.setSoftwareName(mSoftwareName.getText().toString());
        mAddNewSoftwareResourceSetter.setValidCount(Integer.parseInt(mSoftwareCount.getText().toString()));
        mAddNewSoftwareResourceSetter.setLicenseKeyValue(mSoftwareLicenceKey.getText().toString());
        mAddNewSoftwareResourceSetter.setPurchasedBy(adminList.get(mSelectAdminSpinner.getSelectedItemPosition() - 1).getId());                    // -1 because we have explicitly added 'tap to select' string on index 0
        mAddNewSoftwareResourceSetter.setLicenseType(mSoftwareLicenceList.get(mLicenceTypeSpinner.getSelectedItemPosition() - 1).getID());
        mAddNewSoftwareResourceSetter.setValidUpto(mValidUptoDate.getText().toString());
        mAddNewSoftwareResourceSetter.setSoftwareBrand(mSoftwareBrandList.get(mBrandDetailSpinner.getSelectedItemPosition() - 1).getID());

        LoggerUtility.makeLog(TAG, "Created By : " + mAddNewSoftwareResourceSetter.getCreatedBy());
        LoggerUtility.makeLog(TAG, "Description : " + mAddNewSoftwareResourceSetter.getDescription());
        LoggerUtility.makeLog(TAG, "License Type : " + mAddNewSoftwareResourceSetter.getLicenseType());
        LoggerUtility.makeLog(TAG, "Software Brand : " + mAddNewSoftwareResourceSetter.getSoftwareBrand());
        LoggerUtility.makeLog(TAG, "Software Name : " + mAddNewSoftwareResourceSetter.getSoftwareName());
        LoggerUtility.makeLog(TAG, "Version : " + mAddNewSoftwareResourceSetter.getVersion());
        LoggerUtility.makeLog(TAG, "License Key Value : " + mAddNewSoftwareResourceSetter.getLicenseKeyValue());
        LoggerUtility.makeLog(TAG, "Purchased Date : " + mAddNewSoftwareResourceSetter.getPurchasedDate());
        LoggerUtility.makeLog(TAG, "Purchased By : " + mAddNewSoftwareResourceSetter.getPurchasedBy());
        LoggerUtility.makeLog(TAG, "Valid upto : " + mAddNewSoftwareResourceSetter.getValidUpto());
    }

    void callAddNewSoftwareSetterApi() {
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        final String token = SharedPref.getSharedPreferences(this, TOKEN);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = callAPIInterface.createNewSoftware(LOGIN_REQUEST_HEADER_VALUE, token, mAddNewSoftwareResourceSetter);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<ResponseGetterBase>() {
                         @Override
                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getCode() == OK) {
                                     LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getMessage());
                                 }
                             } catch (NullPointerException e) {
                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             } finally {
                                 Intent i = new Intent(getApplicationContext(), AdminHomeMainActivity.class);
                                 startActivity(i);
                             }
                         }

                         @Override
                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.server_error));
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );
    }

    void callEditSoftwareSetterApi() {
        final ProgressDialog progressDialog = new ProgressDialog(AddNewSoftwareResourceActivity.this);
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        final String token = SharedPref.getSharedPreferences(this, TOKEN);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created");
        Call<ResponseGetterBase> call = callAPIInterface.getSoftwareUpdateResponse(LOGIN_REQUEST_HEADER_VALUE, token, mUpdateSoftwareSetter);
        LoggerUtility.makeLog(TAG, "response in call object");
        call.enqueue(new Callback<ResponseGetterBase>() {
                         @Override
                         public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             try {
                                 if (response.body().getCode() == OK) {
                                     LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getMessage());
                                     Intent i = new Intent(getApplicationContext(), AdminHomeMainActivity.class);
                                     startActivity(i);
                                     overridePendingTransition(R.anim.slide_from_right, R.anim.slide_to_left);
                                 } else {
                                     LoggerUtility.ToastGeneratorShort(getApplicationContext(), response.body().getMessage());
                                 }
                             } catch (NullPointerException e) {
                                 LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                             }
                         }

                         @Override
                         public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.ToastGeneratorShort(getApplicationContext(), getString(R.string.server_error));
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );

    }
}


