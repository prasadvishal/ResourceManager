package com.mindfiresolutions.resourcemanager;

//Created by Shivangi Singh on 3/16/2017.
// modified on 3/17/2017

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import java.io.FileNotFoundException;
import java.io.InputStream;


public class EditUserProfile extends AppCompatActivity {

    private EditText mEditUserPassword, mConfEditUserPassword, mEdtMobile, mEditOldPassword;
    private ImageView mUserImg;
    private final int SELECT_PHOTO = 1;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.edit_profile);

        //variables initialized
        mEdtMobile = (EditText) findViewById(R.id.edit_contact);
        mEditOldPassword = (EditText) findViewById(R.id.edit_old_password);
        mEditUserPassword = (EditText) findViewById(R.id.edit_password);
        mConfEditUserPassword = (EditText) findViewById(R.id.conf_edit_password);
        mUserImg = (ImageView) findViewById(R.id.user_img);

        //so that paste option is disabled
        mEditUserPassword.setLongClickable(false);
        mConfEditUserPassword.setLongClickable(false);

        findViewById(R.id.edit_save).setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                //TODO validating mEditOldPassword field for stored password

                if (!LoggerUtility.getTextFromView(mEdtMobile).isEmpty()) {
                    if ((LoggerUtility.getTextFromView(mEdtMobile).length()) != 10) { //Validating 10 digits in mobile number field
                        LoggerUtility.requestFocusIfError(mEdtMobile, getString(R.string.error_invalid_mobile));
                        return;
                    }
                }
                //check if password is empty then set error msg
                if (mEditUserPassword.getText().toString().isEmpty()) {
                    LoggerUtility.requestFocusIfError(mEditUserPassword, getString(R.string.error_field_required));
                    return;
                }
                //check if confirm password is empty then set error msg
                if (mConfEditUserPassword.getText().toString().isEmpty()) {
                    LoggerUtility.requestFocusIfError(mConfEditUserPassword, getString(R.string.error_field_required));
                    return;
                }
                //check if passwords do not match then set error msg
                if (!mEditUserPassword.getText().toString().equals(mConfEditUserPassword.getText().toString())) {
                    LoggerUtility.requestFocusIfError(mConfEditUserPassword, getString(R.string.error_cnfrm_password_mismatch));
                    return;
                }
                LoggerUtility.makeShortToast(getApplicationContext(), getString(R.string.password_changed_successfully));

            }
        });
        mUserImg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
                photoPickerIntent.setType("image/*");
                startActivityForResult(photoPickerIntent, SELECT_PHOTO);
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent imageReturnedIntent) {
        super.onActivityResult(requestCode, resultCode, imageReturnedIntent);
        switch (requestCode) {
            case SELECT_PHOTO:
                if (resultCode == RESULT_OK) {
                    try {
                        final Uri imageUri = imageReturnedIntent.getData();
                        final InputStream imageStream = getContentResolver().openInputStream(imageUri);
                        final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);
                        mUserImg.setImageBitmap(selectedImage);
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
                }
        }
    }


}

