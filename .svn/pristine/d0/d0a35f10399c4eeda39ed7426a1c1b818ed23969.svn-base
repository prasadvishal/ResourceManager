package com.mindfiresolutions.resourcemanager.launcherPackage;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.text.method.PasswordTransformationMethod;
import android.view.View;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;

import com.mindfiresolutions.resourcemanager.user.userHome.HomeActivity;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.R;

/**
 * Created By: Shivangi on: 3/8/2017
 * Last modified on: 3/14/2017
 */

public class LoginActivity extends AppCompatActivity {

    private EditText mUsernameEdit;
    private EditText mPasswordEdit;
    private CheckBox mShowPassword;
    private static final String USERPREFERENCES = "UserPrefs";
    private static final String NAMEKEY = "nameKey";
    private static final String PASSWORDKEY = "passwordKey";

    private final String TAG = LoginActivity.class.getSimpleName();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.login_activity);

        SharedPreferences sharedPreferences = getSharedPreferences(USERPREFERENCES, Context.MODE_PRIVATE);
        LoggerUtility.makeLog(TAG, "object of sharedPreferences initialized with private mode");
        final SharedPreferences.Editor EDITOR = sharedPreferences.edit();

        //initialize variables
        mUsernameEdit = (EditText) findViewById(R.id.ed_username);
        mPasswordEdit = (EditText) findViewById(R.id.ed_password);
        mShowPassword = (CheckBox) findViewById(R.id.show_password);
        LoggerUtility.makeLog(TAG, "Variables initialized");

        //check to see if there is any entry in shared preferences
        if (sharedPreferences.contains(NAMEKEY)) {
            LoggerUtility.makeLog(TAG, "SharedPreferences contains Data");
            mUsernameEdit.setText(sharedPreferences.getString(NAMEKEY, ""));
            mPasswordEdit.setText(sharedPreferences.getString(PASSWORDKEY, ""));
            LoggerUtility.makeLog(TAG, sharedPreferences.getString(NAMEKEY, ""));
            LoggerUtility.makeLog(TAG, "Shared Preference contains NameKey, writing username and password into fields from preference");
        } else
        //if no entry exists then go with normal flow
        {
            //change color on focus change
            changeColorOnFocus(mUsernameEdit, (TextView) findViewById(R.id.tv_username));
            changeColorOnFocus(mPasswordEdit, (TextView) findViewById(R.id.tv_password));
        }
        //if checkbox is set then show password else show ****
        mShowPassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mShowPassword.isChecked()) {
                    mPasswordEdit.setTransformationMethod(null);
                } else {
                    mPasswordEdit.setTransformationMethod(new PasswordTransformationMethod());
                }
            }
        });
        //set long click on password as false
        mPasswordEdit.setLongClickable(false);
        findViewById(R.id.signup).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent i = new Intent(getApplicationContext(), SignUpActivity.class);
                startActivity(i);
            }
        });
        findViewById(R.id.login).setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View view) {
                if (LoggerUtility.getTextFromView(mUsernameEdit).length() == 0) {
                    LoggerUtility.requestFocusIfError(mUsernameEdit, getString(R.string.error_field_required));
                    return;
                }
                if (mPasswordEdit.length() == 0) {
                    LoggerUtility.requestFocusIfError(mPasswordEdit, getString(R.string.error_field_required));
                    return;
                }
                //TODO do the else part
                String userName, password;
                userName = mUsernameEdit.getText().toString();
                password = mPasswordEdit.getText().toString();
                EDITOR.putString(NAMEKEY, userName);
                EDITOR.putString(PASSWORDKEY, password);
                EDITOR.apply();

                if (userName.equals("user") && (password.equals("password"))) {
                    Intent i = new Intent(getApplicationContext(), HomeActivity.class);
                    startActivity(i);
                } else {
                    LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.prompt_wrong_login_credentials));
                }
                if (userName.equals("user") && (password.equals("password"))) {
                    Intent i = new Intent(getApplicationContext(), HomeActivity.class);
                    startActivity(i);
                } else {
                    LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.prompt_wrong_login_credentials));
                }
                Intent i = new Intent(getApplicationContext(), HomeActivity.class);
                startActivity(i);
            }
        });
        LoggerUtility.makeLog(TAG, "outside login button");
    }

    void changeColorOnFocus(EditText editText, final TextView textView) {
        editText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    textView.setTextColor(ContextCompat.getColor(LoginActivity.this, R.color.label_gray));
                } else {
                    textView.setTextColor(ContextCompat.getColor(LoginActivity.this, R.color.white));
                }
            }
        });
    }
}
//TODO add autocomplete
//add function which sends dataext
//add function which compares data
