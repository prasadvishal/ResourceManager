package com.mindfiresolutions.resourcemanager.admin;

import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.mindfiresolutions.resourcemanager.R;
import com.mindfiresolutions.resourcemanager.model.AddNewHardwareResourceSetter;
import com.mindfiresolutions.resourcemanager.model.HardwareBrandResponse;
import com.mindfiresolutions.resourcemanager.model.HardwareBrandSetter;
import com.mindfiresolutions.resourcemanager.model.HardwareDetails;
import com.mindfiresolutions.resourcemanager.model.HardwareDetailsByIdGetter;
import com.mindfiresolutions.resourcemanager.model.HardwareTypeResponse;
import com.mindfiresolutions.resourcemanager.model.HardwareTypeSetter;
import com.mindfiresolutions.resourcemanager.model.ResponseGetterBase;
import com.mindfiresolutions.resourcemanager.model.SoftwareDetails;
import com.mindfiresolutions.resourcemanager.utility.CallAPIInterface;
import com.mindfiresolutions.resourcemanager.utility.Drawer;
import com.mindfiresolutions.resourcemanager.utility.InternetConnections;
import com.mindfiresolutions.resourcemanager.utility.LoggerUtility;
import com.mindfiresolutions.resourcemanager.utility.ServiceGenerator;
import com.mindfiresolutions.resourcemanager.utility.SharedPref;
import com.weiwangcn.betterspinner.library.material.MaterialBetterSpinner;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.mindfiresolutions.resourcemanager.utility.APIurls.LOGIN_REQUEST_HEADER_VALUE;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.BAD_REQUEST;
import static com.mindfiresolutions.resourcemanager.utility.HttpCodes.OK;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.HARDWARE_DETAILS;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_COUNT;
import static com.mindfiresolutions.resourcemanager.utility.KeyValueConstants.SOFTWARE_DETAILS;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.NAMEKEY;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.TOKEN;
import static com.mindfiresolutions.resourcemanager.utility.UserPreferences.USERPREFERENCES;

/**
 * Created By: Vishal on 7th April
 * Last modified on 14th April
 */

public class AddNewHardwareResourceActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener, NavigationView.OnNavigationItemSelectedListener, View.OnClickListener {

    MaterialBetterSpinner mBrandSpinner,mHardwareTypeSpinner;
    private EditText mHardwareDescription, mMACid, mSrvcTag;
    private TextView mOrderDateCreated, mReceivedDate, mCurrentDate;
    private Button mAddHardwareButton;
    private SimpleDateFormat mDateFormatter;
    private CheckBox mShareStatus;
    private DatePickerDialog mDatePickerDialog;
    private IntentIntegrator qrScan;
    private Drawer mDrawer = new Drawer();
    private static final String TAG = AddNewHardwareResourceActivity.class.getSimpleName();
    private List<HardwareBrandSetter> hardwareBandList;
    private List<HardwareTypeSetter> hardwareTypeList;
    private SharedPreferences mSharedPreferences;
    private ImageButton mScanCodeButton;
    private boolean mIsEditing;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Intent i = getIntent();
        setContentView(R.layout.activity_admin_main);
        ActionBar ab = getSupportActionBar();
        // check for Actionbar if present then set tittle
        if (ab != null && ab.isShowing()) {
            ab.setTitle(getString(R.string.app_name));
            ab.setSubtitle(getString(R.string.add_new_hardware_resource));
        }
        makeDrawer();
        findviewsbyids();
          //to assign objects with their views
        //prepareListWithData();
        hardwareBandList = new ArrayList<>();
        hardwareTypeList = new ArrayList<>();
        //fillTodayDate();
        clickListenerDate(mReceivedDate);
        clickListenerDate(mOrderDateCreated);
        qrScan = new IntentIntegrator(this);
        mScanCodeButton.setOnClickListener(this);
        if (i.hasExtra(HARDWARE_DETAILS)) {
            mIsEditing = true;
            HardwareDetailsByIdGetter hardwareDetails = i.getExtras().getParcelable(HARDWARE_DETAILS);
            prefillDetails(hardwareDetails);
        }
        if (InternetConnections.checkInternetConnection(getApplicationContext())) {
            LoggerUtility.makeLog(TAG, "INTERNET connection available");
            fillSpinner();
            mAddHardwareButton.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {

                    if (mHardwareTypeSpinner.getText().length() == 0) {
                        LoggerUtility.makeShortToast(AddNewHardwareResourceActivity.this,getString(R.string.prompt_hardware_type_selection));
                        mHardwareTypeSpinner.performClick();
                        mHardwareTypeSpinner.requestFocus();
                        return;
                    }
                    if (mBrandSpinner.getText().length() == 0) {
                        LoggerUtility.makeShortToast(AddNewHardwareResourceActivity.this,getString(R.string.prompt_brand_selection));
                        mBrandSpinner.performClick();
                        mBrandSpinner.requestFocus();
                        return;
                    }

                    if (LoggerUtility.getTextFromView(mMACid).length() == 0) {
                        LoggerUtility.requestFocusIfError(mMACid, getString(R.string.error_field_required), TAG, "Validation Error: No value for MAC ID");
                        mMACid.setText(LoggerUtility.getTextFromView(mMACid));
                        return;
                    }
                    if (LoggerUtility.getTextFromView(mSrvcTag).length() == 0) {
                        LoggerUtility.requestFocusIfError(mSrvcTag, getString(R.string.error_field_required), TAG, "Validation Error: No value for Service Tag");
                        mSrvcTag.setText(LoggerUtility.getTextFromView(mSrvcTag));
                        return;
                    }
                    if (LoggerUtility.getTextFromView(mOrderDateCreated).length() == 0) {
                        LoggerUtility.requestFocusIfError(mOrderDateCreated, getString(R.string.error_field_required), TAG, "Validation Error: No value for Ordered Date");
                        mOrderDateCreated.setText(LoggerUtility.getTextFromView(mOrderDateCreated));
                        return;
                    }
                    if (LoggerUtility.getTextFromView(mReceivedDate).length() == 0) {
                        LoggerUtility.requestFocusIfError(mOrderDateCreated, getString(R.string.error_field_required), TAG, "Validation Error: No value for Received Date");
                        mReceivedDate.setText(LoggerUtility.getTextFromView(mReceivedDate));
                    }

                    AddNewHardwareResourceSetter addNewHardwareResourceSetter = new AddNewHardwareResourceSetter();
                    addNewHardwareResourceSetter.setMACID(LoggerUtility.getTextFromView(mMACid));
                    addNewHardwareResourceSetter.setServiceTag(LoggerUtility.getTextFromView(mSrvcTag));
                    addNewHardwareResourceSetter.setOrderDate(LoggerUtility.getTextFromView(mOrderDateCreated));
                    addNewHardwareResourceSetter.setReceivedDate(LoggerUtility.getTextFromView(mReceivedDate));
                    addNewHardwareResourceSetter.setDescription(LoggerUtility.getTextFromView(mHardwareDescription));
                    if (mShareStatus.isChecked())
                        addNewHardwareResourceSetter.setIsSharable(true);
                    else
                        addNewHardwareResourceSetter.setIsSharable(false);
                    addNewHardwareResourceSetter.setType(SpinnerSelectedStringToIdMap(mHardwareTypeSpinner.getId(),mHardwareTypeSpinner.getText().toString()));
                    addNewHardwareResourceSetter.setBrand(SpinnerSelectedStringToIdMap(mBrandSpinner.getId(),mBrandSpinner.getText().toString()));
                    LoggerUtility.makeShortToast(AddNewHardwareResourceActivity.this,mBrandSpinner.getText().toString());
                    final String userNameInSharedPreference = mSharedPreferences.getString(NAMEKEY, "");
                    addNewHardwareResourceSetter.setCreatedBy(userNameInSharedPreference);
                    final String token = mSharedPreferences.getString(TOKEN, "");
                    final ProgressDialog progressDialog = new ProgressDialog(AddNewHardwareResourceActivity.this);
                    progressDialog.setMessage(getString(R.string.loading));
                    progressDialog.show();
                    progressDialog.setCancelable(false);
                    progressDialog.setCanceledOnTouchOutside(false);
                    CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
                    LoggerUtility.makeLog(TAG, "Retrofit object created");
                    Call<ResponseGetterBase> call = callAPIInterface.addNewHardwareRequestResponse(LOGIN_REQUEST_HEADER_VALUE, token, addNewHardwareResourceSetter);
                    LoggerUtility.makeLog(TAG, "response in call object");
                    call.enqueue(new Callback<ResponseGetterBase>() {
                        @Override
                        public void onResponse(Call<ResponseGetterBase> call, Response<ResponseGetterBase> response) {
                            //response's body
                            progressDialog.dismiss();
                            LoggerUtility.makeLog(TAG, "Response body");
                            try {
                                if (response.body().getCode() == OK) {
                                    LoggerUtility.makeShortToast(getApplicationContext(), getString(R.string.successfully_added_new_hardware));
                                    LoggerUtility.makeLog(TAG, "Validated and Sucessfully Added New Hardware.");
                                }
                                if (response.body().getCode() == BAD_REQUEST) {
                                    LoggerUtility.makeShortToast(getApplicationContext(), "Invalid ResponseGetterBase");
                                }
                            } catch (NullPointerException e) {
                                LoggerUtility.makeLongToast(getApplicationContext(), getString(R.string.error_requesting_api));
                            }
                            finally {
                                Intent i = new Intent(getApplicationContext(), AdminHomeMainActivity.class);
                                startActivity(i);
                            }
                        }

                        @Override
                        public void onFailure(Call<ResponseGetterBase> call, Throwable t) {
                            progressDialog.dismiss();
                            LoggerUtility.makeLog(TAG, "Error requesting API");
                            t.printStackTrace();
                        }
                    });
                }

            });
        } else {
            LoggerUtility.makeShortToast(getApplicationContext(), getString(R.string.no_internet));
        }
    }

    private void prefillDetails(HardwareDetailsByIdGetter hardwareDetails) {
        mMACid.setText(hardwareDetails.getMACID());
        mSrvcTag.setText(hardwareDetails.getServiceTag());
        mOrderDateCreated.setText(hardwareDetails.getOrderDate());
        mReceivedDate.setText(hardwareDetails.getReceivedDate());

    }

    private void makeDrawer() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        CoordinatorLayout coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinator_app_home);
        LoggerUtility.makeLog(TAG, "outside Coordinator");
        final FrameLayout frameLayout = (FrameLayout) coordinatorLayout.findViewById(R.id.content_frame_activity_layout);
        getLayoutInflater().inflate(R.layout.activity_add_new_hardware_resource, frameLayout);
        LoggerUtility.makeLog(TAG, "Toolbar created");
        mDrawer.setDrawerToggle(findViewById(R.id.drawer_layout), toolbar, this, findViewById(R.id.nav_view));
        LoggerUtility.makeLog(TAG, "after setDrawerToggle");
        changeNavigationView(findViewById(R.id.nav_view));
    }

    void findviewsbyids()
    {
        mDateFormatter = new SimpleDateFormat(getString(R.string.date_format), Locale.getDefault());
        mHardwareDescription = (EditText) findViewById(R.id.new_hardware_rqst_desc);
        mSrvcTag = (EditText) findViewById(R.id.add_new_hardware_srvctag);
        mMACid = (EditText) findViewById(R.id.add_new_hardware_mac_id);
        mOrderDateCreated = (TextView) findViewById(R.id.add_new_hardware_order_date);
        mReceivedDate = (TextView) findViewById(R.id.add_new_hardware_rcvd_date);
        mShareStatus = (CheckBox) findViewById(R.id.add_new_hardware_shared_resource_chkbox);
        mAddHardwareButton = (Button) findViewById(R.id.add_new_hardware_add_hardware_button);
        mSharedPreferences = getSharedPreferences(USERPREFERENCES, Context.MODE_PRIVATE);
        mScanCodeButton = (ImageButton) findViewById(R.id.service_tag_scan_button);
    }


    private void clickListenerDate(final TextView dateTextView) {
        dateTextView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                setDateTimeField(dateTextView.getId());
                mDatePickerDialog.show();
            }
        });
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        // On selecting a spinner item
        String item = parent.getItemAtPosition(position).toString();
        // Showing selected spinner item
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
    }

    public void onNothingSelected(AdapterView<?> arg0) {
        // TODO Auto-generated method stub
    }
//
//    private void fillTodayDate() {
//        long date = System.currentTimeMillis();
//        LoggerUtility.makeLog(TAG, "inside fill TodayDate");
//        String SIMPLE_DATE_FORMAT = "MMM MM dd, yyyy h:mm a";
//        SimpleDateFormat sdf = new SimpleDateFormat(SIMPLE_DATE_FORMAT, Locale.ENGLISH);
//        String dateString = sdf.format(date);
//        mCurrentDate.setText(dateString);
//    }

    private void setDateTimeField(final int viewId) {//function to set date in mIssueDate using the date picker
//        findViewById(viewId).setOnClickListener(this);
        Calendar newCalendar = Calendar.getInstance();
        mDatePickerDialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                Calendar newDate = Calendar.getInstance();
                newDate.set(year, monthOfYear, dayOfMonth);
                ((TextView) findViewById(viewId)).setText(mDateFormatter.format(newDate.getTime()));
            }
        }, newCalendar.get(Calendar.YEAR), newCalendar.get(Calendar.MONTH), newCalendar.get(Calendar.DAY_OF_MONTH));
    }

    int SpinnerSelectedStringToIdMap(int spinnerid, String text) {

        int id = 0;
        switch (spinnerid) {
            case (R.id.add_new_hardware_hardware_brand_spinner):

                for (int i = 0; i < hardwareBandList.size(); i++) {
                    if (hardwareBandList.get(i).getBrand().equals(text)) {
                        id = hardwareBandList.get(i).getId();
                    }
                }
            case (R.id.add_new_hardware_hardware_type_spinner):
                for (int i = 0; i < hardwareTypeList.size(); i++) {
                    if (hardwareTypeList.get(i).getType().equals(text)) {
                        id = hardwareTypeList.get(i).getId();
                    }
                }
        }
        return id;
    }

//    int SpinnerSelectedStringToIdMap(MaterialBetterSpinner spinner) {
//        String text = spinner.getSelectedItem().toString();
//        LoggerUtility.makeLog(TAG, "Selected String: " + text + " of Spinner: " + spinner.getId());
//        int id = 0;
//        switch (spinner.getId()) {
//            case (R.id.add_new_hardware_hardware_brand_spinner):
//
//                for (int i = 0; i < hardwareBandList.size(); i++) {
//                    if (hardwareBandList.get(i).getBrand().equals(text)) {
//                        id = hardwareBandList.get(i).getId();
//                    }
//                }
//            case (R.id.add_new_hardware_hardware_type_spinner):
//                for (int i = 0; i < hardwareTypeList.size(); i++) {
//                    if (hardwareTypeList.get(i).getType().equals(text)) {
//                        id = hardwareTypeList.get(i).getId();
//                    }
//                }
//        }
//        return id;
//    }

    void fillSpinner() {
        mBrandSpinner = (MaterialBetterSpinner) findViewById(R.id.add_new_hardware_hardware_brand_spinner);
        mHardwareTypeSpinner = (MaterialBetterSpinner) findViewById(R.id.add_new_hardware_hardware_type_spinner);
        mBrandSpinner.setOnItemSelectedListener(this);
        mHardwareTypeSpinner.setOnItemSelectedListener(this);
        final ProgressDialog progressDialog = new ProgressDialog(AddNewHardwareResourceActivity.this);
        final String token = mSharedPreferences.getString(TOKEN, "");
        progressDialog.setMessage(getString(R.string.loading));
        progressDialog.show();
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        CallAPIInterface callAPIInterface = ServiceGenerator.createService(CallAPIInterface.class);
        LoggerUtility.makeLog(TAG, "Retrofit object created in updateUserProfile");
        Call<HardwareBrandResponse> call = callAPIInterface.getMasterHardwareBrands(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object in UpdateUserProfile");
        call.enqueue(new Callback<HardwareBrandResponse>() {
                         @Override
                         public void onResponse(Call<HardwareBrandResponse> call, Response<HardwareBrandResponse> response) {
                             //response's body
                             LoggerUtility.makeLog(TAG, "Response body");
                             progressDialog.dismiss();
                             if (response.body().getResponse().getCode() == OK) {
                                 hardwareBandList = response.body().getHardwareBrandSetter();
                                 List<String> hardwareBrandArray = new ArrayList<>();

                                 // Adding brand name in array using foreach loop
                                 for (HardwareBrandSetter brandSetter : hardwareBandList) {
                                     hardwareBrandArray.add(brandSetter.getBrand());
                                 }
                                 hardwareBrandArray.add(getString(R.string.others));


                                 ArrayAdapter<String> adapterLicense = new ArrayAdapter<>(AddNewHardwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, hardwareBrandArray);
                                 LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                 mBrandSpinner.setAdapter(adapterLicense);
                             }
                             else{
                                 LoggerUtility.makeShortToast(getApplicationContext(), response.body().getResponse().getMessage());
                             }
                         }

                         @Override
                         public void onFailure(Call<HardwareBrandResponse> call, Throwable t) {
                             progressDialog.dismiss();
                             LoggerUtility.makeLog(TAG, "Error requesting API");
                         }
                     }
        );

        Call<HardwareTypeResponse> callBrand = callAPIInterface.getMasterHardwareTypes(LOGIN_REQUEST_HEADER_VALUE, token);
        LoggerUtility.makeLog(TAG, "response in call object in hardware type detailse");
        callBrand.enqueue(new Callback<HardwareTypeResponse>() {
                              @Override
                              public void onResponse(Call<HardwareTypeResponse> call, Response<HardwareTypeResponse> response) {
                                  //response's body
                                  LoggerUtility.makeLog(TAG, "Response body");
                                  try {
                                      if (response.body().getResponse().getCode() == OK) {
                                          hardwareTypeList = response.body().getHardwareTypeSetter();
                                          List<String> hardwareTypeArray = new ArrayList<>();
                                          int i;
                                          for (i = 0; i < hardwareTypeList.size(); i++) {
                                              hardwareTypeArray.add(i, hardwareTypeList.get(i).getType());
                                          }
                                          hardwareTypeArray.add(i, getString(R.string.others));
                                          ArrayAdapter<String> adapterBrand = new ArrayAdapter<>(AddNewHardwareResourceActivity.this, android.R.layout.simple_spinner_dropdown_item, hardwareTypeArray);
                                          LoggerUtility.makeLog(TAG, "Data filled in array adapter");
                                          mHardwareTypeSpinner.setAdapter(adapterBrand);
                                      } else {
                                          LoggerUtility.makeShortToast(getApplicationContext(), response.body().getResponse().getMessage());
                                      }
                                  }
                                  catch(Exception e)
                                  {
                                      LoggerUtility.makeLongToast(getApplicationContext(), response.body().getResponse().getMessage());
                                  }
                              }

                              @Override
                              public void onFailure(Call<HardwareTypeResponse> call, Throwable t) {
                                  LoggerUtility.makeLog(TAG, "Error requesting API");
                              }
                          }
        );
    }
    @Override
    public void onBackPressed() {
        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawer.onBackPressed(drawerLayout);
        } else
            super.onBackPressed();
    }

    void changeNavigationView(View view) {
        NavigationView navigationView = (NavigationView) view;
        navigationView.getMenu().clear();
        navigationView.inflateMenu(R.menu.admin_home_drawer_menu);
        //change header text to admin
        View admin_view = navigationView.getHeaderView(0);
        TextView admin_txt = (TextView) admin_view.findViewById(R.id.name_user);
        //TODO complete admin name here
        admin_txt.setText(SharedPref.getSharedPreferences(this,NAMEKEY)); //Showing username
        navigationView.setNavigationItemSelectedListener(this);

    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        return mDrawer.onNavigationItemSelectedAdmin(item, this, findViewById(R.id.drawer_layout));

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);
        if (result != null) {
            //if qrcode has nothing in it
            if (result.getContents() == null) {
                Toast.makeText(this, "Result Not Found", Toast.LENGTH_LONG).show();
            } else {
                //if qr contains data
                mSrvcTag.setText(result.getContents());
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data);
        }
    }

    @Override
    public void onClick(View view) {
        //initiating the qr code scan
        qrScan.initiateScan();
    }
}
